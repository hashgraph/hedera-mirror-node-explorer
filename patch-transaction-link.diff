diff --git a/src/components/staking/ProgressDialog.vue b/src/components/staking/ProgressDialog.vue
index 9db1eed..30bb8ed 100644
--- a/src/components/staking/ProgressDialog.vue
+++ b/src/components/staking/ProgressDialog.vue
@@ -52,7 +52,7 @@
         <div class="is-flex is-align-items-baseline mt-4" style="line-height: 21px">
           <span v-if="extraMessage" class="h-is-property-text"> {{ extraMessage }} </span>
           <span v-else class="h-is-property-text" style="visibility: hidden">Filler</span>
-          <TransactionLink v-if="extraTransaction" :transaction-id="extraTransaction" class="ml-2"/>
+          <TransactionLink v-if="extraTransactionHash" :transaction-loc="extraTransactionHash" class="ml-2"/>
         </div>
 
         <div class="is-flex is-justify-content-flex-end">
@@ -89,7 +89,7 @@ export default defineComponent({
     },
     mainMessage: String,
     extraMessage: String,
-    extraTransaction: String,
+    extraTransactionHash: String,
     showSpinner: Boolean
   },
 
diff --git a/src/components/values/TransactionLink.vue b/src/components/values/TransactionLink.vue
index 8cc07c9..741ea35 100644
--- a/src/components/values/TransactionLink.vue
+++ b/src/components/values/TransactionLink.vue
@@ -24,9 +24,9 @@
 
 <template>
 
-  <div v-if="transactionId">
-    <router-link :to="{name: 'TransactionDetails', params: {transactionId: transactionId}}">
-      <span class="is-numeric should-wrap">{{ normalizedId }}</span>
+  <div v-if="formattedId && routeToTransaction">
+    <router-link :to="routeToTransaction">
+      <span class="is-numeric should-wrap">{{ formattedId }}</span>
     </router-link>
   </div>
 
@@ -42,14 +42,23 @@
 
 <script lang="ts">
 
-import {computed, defineComponent, PropType} from "vue";
+import {computed, defineComponent, onMounted, PropType, ref, watch} from "vue";
 import {TransactionID} from "@/utils/TransactionID";
+import {routeManager} from "@/router";
+import {TransactionCollector} from "@/utils/collector/TransactionCollector";
+import {TransactionByIdResponse, TransactionResponse} from "@/schemas/HederaSchemas";
+import {AxiosResponse} from "axios";
+import {PathParam} from "@/utils/PathParam";
+import {Timestamp} from "@/utils/Timestamp";
+import {TransactionHash} from "@/utils/TransactionHash";
+import {TransactionByHashCollector} from "@/utils/collector/TransactionByHashCollector";
 
 export default defineComponent({
   name: "TransactionLink",
 
   props: {
-    transactionId: String as PropType<string|null>,
+    transactionLoc: String as PropType<string|undefined>,
+    transactionId: String as PropType<string|undefined>,
     showNone: {
       type: Boolean,
       default: true
@@ -57,8 +66,44 @@ export default defineComponent({
   },
 
   setup(props) {
-    const normalizedId = computed(() => TransactionID.normalize(props.transactionId ?? "?"))
-    return { normalizedId }
+
+    const normalizedId = ref<string|null>(null)
+    const updateNormalizedId = () => {
+      if (props.transactionId) {
+        normalizedId.value = props.transactionId
+      } else if (props.transactionLoc) {
+        const tloc = PathParam.parseTransactionLoc(props.transactionLoc)
+        if (tloc instanceof Timestamp) {
+          TransactionCollector.instance.fetch(props.transactionLoc).then((r: AxiosResponse<TransactionResponse>) => {
+            const transactions = r.data.transactions ?? []
+            const transaction0 = transactions.length >= 1 ? transactions[0] : null
+            normalizedId.value = transaction0?.transaction_id ?? null
+          })
+        } else if (tloc instanceof TransactionHash) {
+          TransactionByHashCollector.instance.fetch(props.transactionLoc).then((r: AxiosResponse<TransactionByIdResponse>) => {
+            const transactions = r.data.transactions ?? []
+            const transaction0 = transactions.length >= 1 ? transactions[0] : null
+            normalizedId.value = transaction0?.transaction_id ?? null
+          })
+        } else {
+          normalizedId.value = null
+        }
+      } else {
+        normalizedId.value = null
+      }
+    }
+    watch([computed(() => props.transactionLoc), computed(() => props.transactionId)], () => updateNormalizedId())
+    onMounted(() => updateNormalizedId())
+
+    const formattedId = computed(() => {
+      return normalizedId.value !== null ? TransactionID.normalize(normalizedId.value) : null
+    })
+
+    const routeToTransaction = computed(() => {
+      return props.transactionLoc ? routeManager.makeRouteToTransaction(props.transactionLoc, normalizedId.value ?? undefined) : null
+    })
+
+    return { formattedId, routeToTransaction }
   }
 });
 
diff --git a/src/pages/AccountDetails.vue b/src/pages/AccountDetails.vue
index f99741f..c33aedc 100644
--- a/src/pages/AccountDetails.vue
+++ b/src/pages/AccountDetails.vue
@@ -127,7 +127,7 @@
             <Property id="createTransaction">
               <template v-slot:name>Create Transaction</template>
               <template v-slot:value>
-                <TransactionLink :transaction-id="accountCreateTransactionId"/>
+                <TransactionLink :transactionLoc="account?.created_timestamp"/>
               </template>
             </Property>
 
@@ -380,9 +380,6 @@ export default defineComponent({
     //
     // account create transaction
     //
-    const accountCreateTransaction = new TransactionByTimestampLoader(accountLoader.createdTimestamp as ComputedRef)
-    onMounted(() => accountCreateTransaction.requestLoad())
-
     const contractRoute = computed(() => {
       const accountId = accountLoader.accountId.value
       return accountId ? routeManager.makeRouteToContract(accountId) : null
@@ -420,8 +417,6 @@ export default defineComponent({
       stakedNodeId: accountLoader.stakedNodeId,
       stakedAccountId: accountLoader.stakedAccountId,
       stakedNodeDescription: stakeNodeLoader.nodeDescription,
-      accountCreateTransactionId: accountCreateTransaction.transactionId,
-      accountCreatorId: accountCreateTransaction.payerAccountId,
       contractRoute,
       stakedNodeRoute,
       operatorNodeRoute,
diff --git a/src/pages/Staking.vue b/src/pages/Staking.vue
index 5cf5d32..29120d2 100644
--- a/src/pages/Staking.vue
+++ b/src/pages/Staking.vue
@@ -42,7 +42,7 @@
                   :mode="progressDialogMode"
                   :main-message="progressMainMessage"
                   :extra-message="progressExtraMessage"
-                  :extra-transaction="progressExtraTransaction"
+                  :extra-transaction-hash="progressExtraTransactionHash"
                   :show-spinner="showProgressSpinner"
   >
     <template v-slot:dialogTitle>
@@ -268,7 +268,7 @@ export default defineComponent({
     const progressDialogTitle = ref<string|null>(null)
     const progressMainMessage = ref<string|null>(null)
     const progressExtraMessage = ref<string|null>(null)
-    const progressExtraTransaction = ref<string|null>(null)
+    const progressExtraTransactionHash = ref<string|null>(null)
     const showProgressSpinner = ref(false)
     const showDownloadDialog = ref(false)
 
@@ -292,7 +292,7 @@ export default defineComponent({
             progressDialogMode.value = Mode.Error
             progressDialogTitle.value = "Could not connect wallet"
             showProgressSpinner.value = false
-            progressExtraTransaction.value = null
+            progressExtraTransactionHash.value = null
 
             if (reason instanceof WalletDriverError) {
               progressMainMessage.value = reason.message
@@ -388,19 +388,19 @@ export default defineComponent({
         progressDialogTitle.value = (nodeId == null && accountId == null && !declineReward) ? "Stopping staking" : "Updating staking"
         progressMainMessage.value = "Connecting to Hedera Network using your wallet…"
         progressExtraMessage.value = "Check your wallet for any approval request"
-        progressExtraTransaction.value = null
+        progressExtraTransactionHash.value = null
         showProgressSpinner.value = false
-        const transactionID = normalizeTransactionId(await walletManager.changeStaking(nodeId, accountId, declineReward))
+        const transactionHash = normalizeTransactionId(await walletManager.changeStaking(nodeId, accountId, declineReward))
         progressMainMessage.value = "Completing operation…"
         progressExtraMessage.value = "This may take a few seconds"
         showProgressSpinner.value = true
-        await waitForTransactionRefresh(transactionID, 10)
+        await waitForTransactionRefresh(transactionHash, 10)
 
         progressDialogMode.value = Mode.Success
         progressMainMessage.value = "Operation completed"
         showProgressSpinner.value = false
         progressExtraMessage.value = "with transaction ID:"
-        progressExtraTransaction.value = transactionID
+        progressExtraTransactionHash.value = transactionHash
 
       } catch(error) {
 
@@ -412,7 +412,7 @@ export default defineComponent({
           progressMainMessage.value = "Operation did not complete"
           progressExtraMessage.value = JSON.stringify(error.message)
         }
-        progressExtraTransaction.value = null
+        progressExtraTransactionHash.value = null
         showProgressSpinner.value = false
 
       } finally {
@@ -422,20 +422,20 @@ export default defineComponent({
 
     }
 
-    const waitForTransactionRefresh = async (transactionID: string, attemptIndex: number) => {
+    const waitForTransactionRefresh = async (transactionHash: string, attemptIndex: number) => {
       let result: Promise<Transaction | string>
 
       if (attemptIndex >= 0) {
         await waitFor(props.polling)
         try {
-          const response = await axios.get<TransactionByIdResponse>("api/v1/transactions/" + transactionID )
+          const response = await axios.get<TransactionByIdResponse>("api/v1/transactions/" + transactionHash )
           const transactions = response.data.transactions ?? []
-          result = Promise.resolve(transactions.length >= 1 ? transactions[0] : transactionID)
+          result = Promise.resolve(transactions.length >= 1 ? transactions[0] : transactionHash)
         } catch {
-          result = waitForTransactionRefresh(transactionID, attemptIndex - 1)
+          result = waitForTransactionRefresh(transactionHash, attemptIndex - 1)
         }
       } else {
-        result = Promise.resolve(transactionID)
+        result = Promise.resolve(transactionHash)
       }
 
       return result
@@ -492,7 +492,7 @@ export default defineComponent({
       progressDialogTitle,
       progressMainMessage,
       progressExtraMessage,
-      progressExtraTransaction,
+      progressExtraTransactionHash,
       showProgressSpinner,
       transactionTableController,
       downloader
diff --git a/src/utils/B64Utils.ts b/src/utils/B64Utils.ts
index 5bbd5e5..6761ab5 100644
--- a/src/utils/B64Utils.ts
+++ b/src/utils/B64Utils.ts
@@ -65,6 +65,50 @@ export function b64ToUint6 (nChr: number): number {
 }
 
 
+export function base64EncArr(aBytes: Uint8Array): string {
+    let nMod3 = 2;
+    let sB64Enc = "";
+
+    const nLen = aBytes.length;
+    let nUint24 = 0;
+    for (let nIdx = 0; nIdx < nLen; nIdx++) {
+        nMod3 = nIdx % 3;
+        if (nIdx > 0 && ((nIdx * 4) / 3) % 76 === 0) {
+            sB64Enc += "\r\n";
+        }
+
+        nUint24 |= aBytes[nIdx] << ((16 >>> nMod3) & 24);
+        if (nMod3 === 2 || aBytes.length - nIdx === 1) {
+            sB64Enc += String.fromCodePoint(
+                uint6ToB64((nUint24 >>> 18) & 63),
+                uint6ToB64((nUint24 >>> 12) & 63),
+                uint6ToB64((nUint24 >>> 6) & 63),
+                uint6ToB64(nUint24 & 63)
+            );
+            nUint24 = 0;
+        }
+    }
+    return (
+        sB64Enc.substr(0, sB64Enc.length - 2 + nMod3) +
+        (nMod3 === 2 ? "" : nMod3 === 1 ? "=" : "==")
+    );
+}
+
+function uint6ToB64(nUint6: number) {
+  return nUint6 < 26
+    ? nUint6 + 65
+    : nUint6 < 52
+    ? nUint6 + 71
+    : nUint6 < 62
+    ? nUint6 - 4
+    : nUint6 === 62
+    ? 43
+    : nUint6 === 63
+    ? 47
+    : 65;
+}
+
+
 //
 // Hexa conversion
 //
diff --git a/src/utils/EthereumHash.ts b/src/utils/EthereumHash.ts
new file mode 100644
index 0000000..92563cd
--- /dev/null
+++ b/src/utils/EthereumHash.ts
@@ -0,0 +1,47 @@
+/*-
+ *
+ * Hedera Mirror Node Explorer
+ *
+ * Copyright (C) 2021 - 2022 Hedera Hashgraph, LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+import {byteToHex, hexToByte} from "@/utils/B64Utils";
+
+export class EthereumHash {
+
+    public readonly bytes: Uint8Array
+
+    //
+    // Public
+    //
+
+    public static parse(byteString: string): EthereumHash|null {
+        const bytes = hexToByte(byteString)
+        return bytes !== null && bytes.length == 32 ? new EthereumHash(bytes) : null
+    }
+
+    public toString(): string {
+        return byteToHex(this.bytes)
+    }
+
+    //
+    // Private
+    //
+
+    private constructor(bytes: Uint8Array) {
+        this.bytes = bytes
+    }
+}
diff --git a/src/utils/PathParam.ts b/src/utils/PathParam.ts
index 3c16546..e447437 100644
--- a/src/utils/PathParam.ts
+++ b/src/utils/PathParam.ts
@@ -21,6 +21,9 @@
 import {aliasToBase32, base32ToAlias, byteToHex, hexToByte} from "@/utils/B64Utils";
 import {EntityID} from "@/utils/EntityID";
 import {TransactionID} from "@/utils/TransactionID";
+import {TransactionHash} from "@/utils/TransactionHash";
+import {EthereumHash} from "@/utils/EthereumHash";
+import {Timestamp} from "@/utils/Timestamp";
 
 export class PathParam { // Block Hash or Number
 
@@ -108,4 +111,8 @@ export class PathParam { // Block Hash or Number
 
         return result
     }
+
+    public static parseTransactionLoc(s: string): Timestamp | TransactionHash | EthereumHash | null {
+        return Timestamp.parse(s) ?? TransactionHash.parse(s) ?? EthereumHash.parse(s)
+    }
 }
\ No newline at end of file
diff --git a/src/utils/RouteManager.ts b/src/utils/RouteManager.ts
index 76e7666..d591bcd 100644
--- a/src/utils/RouteManager.ts
+++ b/src/utils/RouteManager.ts
@@ -58,19 +58,23 @@ export class RouteManager {
     //
 
     public routeToTransaction(t: Transaction): Promise<NavigationFailure | void | undefined> {
-        return this.router.push(this.makeRouteToTransaction(t))
+        return this.router.push(this.makeRouteToTransaction(t.consensus_timestamp, t.transaction_id))
     }
 
-    public routeToTransactionId(transactionId: string|undefined, consensusTimestamp: string|undefined): Promise<NavigationFailure | void | undefined> {
-        const route = {name: 'TransactionDetails', params: {transactionId: transactionId}, query: {t: consensusTimestamp}}
-        return this.router.push(route)
+    public routeToTransactionId(transactionId: string|undefined,
+                                consensusTimestamp: string|undefined): Promise<NavigationFailure | void | undefined> {
+        return this.router.push(this.makeRouteToTransaction(consensusTimestamp, transactionId))
     }
 
-    public makeRouteToTransaction(t: Transaction): RouteLocationRaw {
+    public makeRouteToTransactionObj(transaction: Transaction): RouteLocationRaw {
+        return this.makeRouteToTransaction(transaction.consensus_timestamp, transaction.transaction_id)
+    }
+
+    public makeRouteToTransaction(transactionLoc: string|undefined, transactionId: string|undefined): RouteLocationRaw {
         return {
             name: 'TransactionDetails',
-            params: { transactionId: t.transaction_id },
-            query: { t: t.consensus_timestamp }
+            params: { transactionLoc: transactionLoc },
+            query: { tid: transactionId }
         }
     }
 
diff --git a/src/utils/Timestamp.ts b/src/utils/Timestamp.ts
new file mode 100644
index 0000000..b99787b
--- /dev/null
+++ b/src/utils/Timestamp.ts
@@ -0,0 +1,63 @@
+/*-
+ *
+ * Hedera Mirror Node Explorer
+ *
+ * Copyright (C) 2021 - 2022 Hedera Hashgraph, LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+export class Timestamp {
+
+    public readonly seconds: number
+    public readonly nanoseconds: number
+
+    //
+    // Public
+    //
+
+    public static parse(timestamp: string): Timestamp|null {
+        let result: Timestamp|null
+
+        const i = timestamp.indexOf(".")
+        const s = timestamp.slice(0, i)
+        const n = timestamp.slice(i+1)
+        if (n.indexOf(".") == -1) {
+            const seconds = parseInt(s)
+            const nanoseconds = parseInt(n)
+            if (isNaN(seconds) || isNaN(nanoseconds)) {
+                result = null
+            } else {
+                result = new Timestamp(seconds, nanoseconds)
+            }
+        } else {
+            result = null
+        }
+
+        return result
+    }
+
+    public toString(): string {
+        return this.seconds + "." + this.nanoseconds.toString().padStart(9, "0")
+    }
+
+    //
+    // Private
+    //
+
+    private constructor(seconds: number, nanoseconds: number) {
+        this.seconds = seconds
+        this.nanoseconds = nanoseconds
+    }
+}
diff --git a/src/utils/TransactionHash.ts b/src/utils/TransactionHash.ts
new file mode 100644
index 0000000..8c68dda
--- /dev/null
+++ b/src/utils/TransactionHash.ts
@@ -0,0 +1,56 @@
+/*-
+ *
+ * Hedera Mirror Node Explorer
+ *
+ * Copyright (C) 2021 - 2022 Hedera Hashgraph, LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+import {base64DecToArr, base64EncArr, byteToHex, hexToByte} from "@/utils/B64Utils";
+
+export class TransactionHash {
+
+    public readonly bytes: Uint8Array
+
+    //
+    // Public
+    //
+
+    public static parse(byteString: string): TransactionHash|null {
+        const bytes = hexToByte(byteString)
+        return bytes !== null && bytes.length == 48 ? new TransactionHash(bytes) : null
+    }
+
+    public static parseBase64(base64: string): TransactionHash|null {
+        const bytes = base64DecToArr(base64)
+        return bytes !== null && bytes.length == 48 ? new TransactionHash(bytes) : null
+    }
+
+    public toString(): string {
+        return byteToHex(this.bytes)
+    }
+
+    public toBase64(): string {
+        return base64EncArr(this.bytes)
+    }
+
+    //
+    // Private
+    //
+
+    private constructor(bytes: Uint8Array) {
+        this.bytes = bytes
+    }
+}
diff --git a/src/utils/collector/TransactionByHashCollector.ts b/src/utils/collector/TransactionByHashCollector.ts
new file mode 100644
index 0000000..4a6c232
--- /dev/null
+++ b/src/utils/collector/TransactionByHashCollector.ts
@@ -0,0 +1,37 @@
+/*-
+ *
+ * Hedera Mirror Node Explorer
+ *
+ * Copyright (C) 2021 - 2022 Hedera Hashgraph, LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+import {TransactionByIdResponse} from "@/schemas/HederaSchemas";
+import {Collector} from "@/utils/collector/Collector";
+import axios, {AxiosResponse} from "axios";
+
+export class TransactionByHashCollector extends Collector<TransactionByIdResponse, string> {
+
+    public static readonly instance = new TransactionByHashCollector()
+
+    //
+    // Collector
+    //
+
+    protected async load(transactionHash: string): Promise<AxiosResponse<TransactionByIdResponse>> {
+        return axios.get<TransactionByIdResponse>("api/v1/transactions/" + transactionHash)
+    }
+
+}
\ No newline at end of file
diff --git a/src/utils/collector/TransactionCollector.ts b/src/utils/collector/TransactionCollector.ts
new file mode 100644
index 0000000..3730fb1
--- /dev/null
+++ b/src/utils/collector/TransactionCollector.ts
@@ -0,0 +1,40 @@
+/*-
+ *
+ * Hedera Mirror Node Explorer
+ *
+ * Copyright (C) 2021 - 2022 Hedera Hashgraph, LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+import {TransactionResponse} from "@/schemas/HederaSchemas";
+import {Collector} from "@/utils/collector/Collector";
+import axios, {AxiosResponse} from "axios";
+
+export class TransactionCollector extends Collector<TransactionResponse, string> {
+
+    public static readonly instance = new TransactionCollector()
+
+    //
+    // Collector
+    //
+
+    protected async load(timestamp: string): Promise<AxiosResponse<TransactionResponse>> {
+        const params = {
+            timestamp: timestamp
+        }
+        return axios.get<TransactionResponse>("api/v1/transactions", { params: params })
+    }
+
+}
\ No newline at end of file
diff --git a/src/utils/wallet/WalletDriver_Blade.ts b/src/utils/wallet/WalletDriver_Blade.ts
index d1be034..ed62cd4 100644
--- a/src/utils/wallet/WalletDriver_Blade.ts
+++ b/src/utils/wallet/WalletDriver_Blade.ts
@@ -24,6 +24,7 @@ import {HederaNetwork} from "@bladelabs/blade-web3.js/lib/src/models/blade";
 import {WalletDriver} from "@/utils/wallet/WalletDriver";
 import {WalletDriverError} from "@/utils/wallet/WalletDriverError";
 import {AccountUpdateTransaction} from "@hashgraph/sdk";
+import {byteToHex} from "@/utils/B64Utils";
 
 export class WalletDriver_Blade extends WalletDriver {
 
@@ -75,7 +76,8 @@ export class WalletDriver_Blade extends WalletDriver {
         if (this.signer !== null) {
             try {
                 const response = await this.signer.call(request)
-                result = Promise.resolve(response.transactionId.toString())
+                const transactionHash = "0x" + byteToHex(response.transactionHash)
+                result = Promise.resolve(transactionHash)
             } catch(reason) {
                 throw this.callFailure(reason.message)
             }
diff --git a/src/utils/wallet/WalletDriver_Hashpack.ts b/src/utils/wallet/WalletDriver_Hashpack.ts
index f3eff07..6798fde 100644
--- a/src/utils/wallet/WalletDriver_Hashpack.ts
+++ b/src/utils/wallet/WalletDriver_Hashpack.ts
@@ -26,6 +26,7 @@ import {WalletDriverError} from "@/utils/wallet/WalletDriverError";
 import {HashConnectSigner} from "hashconnect/dist/provider/signer";
 import {AccountUpdateTransaction, Executable, Transaction} from "@hashgraph/sdk";
 import {timeGuard, TimeGuardError} from "@/utils/TimerUtils";
+import {byteToHex} from "@/utils/B64Utils";
 
 export class WalletDriver_Hashpack extends WalletDriver {
 
@@ -62,7 +63,7 @@ export class WalletDriver_Hashpack extends WalletDriver {
     public async updateAccount(request: AccountUpdateTransaction): Promise<string> {
         try {
             const response = await this.performCall(request)
-            return response.transactionId.toString()
+            return "0x" + byteToHex(response.transactionHash)
         } catch(error) {
             if (error instanceof WalletDriverError) {
                 throw error
diff --git a/tests/unit/staking/Staking.spec.ts b/tests/unit/staking/Staking.spec.ts
index 70d0b6e..a59b12e 100644
--- a/tests/unit/staking/Staking.spec.ts
+++ b/tests/unit/staking/Staking.spec.ts
@@ -40,6 +40,7 @@ import ProgressDialog from "@/components/staking/ProgressDialog.vue";
 import {waitFor} from "@/utils/TimerUtils";
 import StakingDialog from "@/components/staking/StakingDialog.vue";
 import {nextTick} from "vue";
+import {TransactionHash} from "@/utils/TransactionHash";
 
 /*
     Bookmarks
@@ -81,10 +82,10 @@ describe("Staking.vue", () => {
         // Transaction used to represent stake update operation
         const STAKE_UPDATE_TRANSACTION = SAMPLE_TRANSACTION
         const STAKE_UPDATE_TRANSACTIONS = SAMPLE_TRANSACTIONS
-        const STAKE_UPDATE_TRANSACTION_ID = STAKE_UPDATE_TRANSACTION.transaction_id
+        const STAKE_UPDATE_TRANSACTION_HASH = TransactionHash.parseBase64(STAKE_UPDATE_TRANSACTION.transaction_hash)!.toString()
 
         // Adds test driver to WalletManager
-        const testDriver = new WalletDriver_Mock(TARGET_ACCOUNT, STAKE_UPDATE_TRANSACTION_ID)
+        const testDriver = new WalletDriver_Mock(TARGET_ACCOUNT, STAKE_UPDATE_TRANSACTION_HASH)
         walletManager.getDrivers().push(testDriver)
 
         // Mocks axios
@@ -100,7 +101,7 @@ describe("Staking.vue", () => {
         mock.onGet(matcher2).reply(200, SAMPLE_NETWORK_NODES)
         const matcher3 = "https://api.coingecko.com/api/v3/coins/hedera-hashgraph"
         mock.onGet(matcher3).reply(200, SAMPLE_COINGECKO);
-        const matcher4 = "/api/v1/transactions/" + STAKE_UPDATE_TRANSACTION_ID
+        const matcher4 = "/api/v1/transactions/" + STAKE_UPDATE_TRANSACTION_HASH
         mock.onGet(matcher4).reply(200, STAKE_UPDATE_TRANSACTIONS)
         const matcher5 = "/api/v1/transactions"
         mock.onGet(matcher5).reply(200, SAMPLE_TRANSACTIONS)
diff --git a/tests/unit/staking/WalletDriver_Mock.ts b/tests/unit/staking/WalletDriver_Mock.ts
index 6acc2a3..e32fb67 100644
--- a/tests/unit/staking/WalletDriver_Mock.ts
+++ b/tests/unit/staking/WalletDriver_Mock.ts
@@ -27,7 +27,7 @@ export class WalletDriver_Mock extends WalletDriver {
     private static WALLET_NAME = "WalletMock"
 
     public readonly account: AccountBalanceTransactions
-    public readonly transactionId: string
+    public readonly transactionHash: string
 
     private connected = false
     private network: string|null = null
@@ -38,10 +38,10 @@ export class WalletDriver_Mock extends WalletDriver {
     // Public
     //
 
-    public constructor(account: AccountBalanceTransactions, transactionId: string) {
+    public constructor(account: AccountBalanceTransactions, transactionHash: string) {
         super(WalletDriver_Mock.WALLET_NAME, null)
         this.account = account
-        this.transactionId = transactionId
+        this.transactionHash = transactionHash
     }
 
 
@@ -87,7 +87,7 @@ export class WalletDriver_Mock extends WalletDriver {
                 if (request.declineStakingRewards !== null) {
                     this.account.decline_reward = request.declineStakingRewards
                 }
-                result = this.transactionId
+                result = this.transactionHash
             } else {
                 throw this.callFailure("Unexpected account id: " + targetAccountID)
             }
