// noinspection DuplicatedCode

/*-
 *
 * Hedera Mirror Node Explorer
 *
 * Copyright (C) 2021 - 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import {describe, expect, test} from 'vitest'
import {FunctionCallAnalyzer, NameTypeValue} from "@/utils/analyzer/FunctionCallAnalyzer";
import {Ref, ref} from "vue";
import {flushPromises} from "@vue/test-utils";
import MockAdapter from "axios-mock-adapter";
import axios from "axios";
import {SignatureCache} from "@/utils/cache/SignatureCache";

describe("FunctionCallAnalyzer.spec.ts", () => {

    test("Call to system contract", async () => {

        const abi = require('../../../../public/abi/IHederaTokenService.json')
        const mock = new MockAdapter(axios);
        const matcher1 = "http://localhost:3000/abi/IHederaTokenService.json"
        mock.onGet(matcher1).reply(200, abi)

        // 1) new
        const input: Ref<string | null> = ref(null)
        const output: Ref<string | null> = ref(null)
        const error: Ref<string | null> = ref(null)
        const contractId: Ref<string | null> = ref(null)
        const functionCallAnalyzer = new FunctionCallAnalyzer(input, output, error, contractId)
        expect(functionCallAnalyzer.functionHash.value).toBeNull()
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBeNull()

        // 2) mount
        functionCallAnalyzer.mount()
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBeNull()
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBeNull()

        // 3) input setup (valid encoding)
        input.value = "0x49146bde000000000000000000000000845b706151aed537b1fd81c1ea4ea03920097abd0000000000000000000000000000000000000000000000000000000002e6ae09"
        output.value = "0x0000000000000000000000000000000000000000000000000000000005a995c0"
        contractId.value = "0.0.359"
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBe("0x49146bde")
        expect(functionCallAnalyzer.signature.value).toBe("associateToken(address,address)")
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([
            new NameTypeValue("account", "address", "0x845b706151aEd537b1FD81c1Ea4EA03920097ABD", null, null),
            new NameTypeValue("token", "address", "0x0000000000000000000000000000000002E6Ae09", null, null),
        ])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([
            new NameTypeValue("responseCode", "int64", BigInt("0x05a995c0"), null, null),
        ])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBe("0x000000000000000000000000845b706151aed537b1fd81c1ea4ea03920097abd0000000000000000000000000000000000000000000000000000000002e6ae09")

        // 4) input setup (invalid input encoding)
        input.value = "0x618dc65e0000000000000000000000000000000000163b5a70a082310000000000000000000000005fe56763c7633efefe8c2272f19732521a48e300"
        output.value = "0x00000000000000000000000000000000000000000000000000003dc604b33217"
        contractId.value = "0.0.359"
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBe("0x618dc65e")
        expect(functionCallAnalyzer.signature.value).toBe("redirectForToken(address,bytes)")
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBe("Decoding Error (data out-of-bounds)")
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBe("Decoding Error (data out-of-bounds)")
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBe("0x0000000000000000000000000000000000163b5a70a082310000000000000000000000005fe56763c7633efefe8c2272f19732521a48e300")

        // 5) output setup (invalid output encoding)
        input.value = "0x49146bde000000000000000000000000845b706151aed537b1fd81c1ea4ea03920097abd0000000000000000000000000000000000000000000000000000000002e6ae09"
        output.value = "0x000000009999999999999999999999999"
        error.value = "0x"
        contractId.value = "0.0.359"
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBe("0x49146bde")
        expect(functionCallAnalyzer.signature.value).toBe("associateToken(address,address)")
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([
            new NameTypeValue("account", "address", "0x845b706151aEd537b1FD81c1Ea4EA03920097ABD", null, null),
            new NameTypeValue("token", "address", "0x0000000000000000000000000000000002E6Ae09", null, null),
        ])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBe("Decoding Error (invalid BytesLike value)")
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull() // 0x is considered as no error
        expect(functionCallAnalyzer.inputArgsOnly.value).toBe("0x000000000000000000000000845b706151aed537b1fd81c1ea4ea03920097abd0000000000000000000000000000000000000000000000000000000002e6ae09")


        // 6) unmount
        functionCallAnalyzer.unmount()
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBe("0x49146bde")
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBe("0x000000000000000000000000845b706151aed537b1fd81c1ea4ea03920097abd0000000000000000000000000000000000000000000000000000000002e6ae09")

        mock.restore()
    })

    test("Call to verified contract: new + mount + setup + unmount", async () => {

        const mock = new MockAdapter(axios);
        const matcher1 = "files/any/295/0x00000000000000000000000000000000002E7A5D"
        mock.onGet(matcher1).reply(200, SOURCIFY_RESPONSE)
        const matcher2 = "api/v1/contracts/" + CONTRACT_DETAILS.contract_id
        mock.onGet(matcher2).reply(200, CONTRACT_DETAILS)

        // 1) new
        const input: Ref<string | null> = ref(null)
        const output: Ref<string | null> = ref(null)
        const error: Ref<string | null> = ref(null)
        const contractId: Ref<string | null> = ref(null)
        const functionCallAnalyzer = new FunctionCallAnalyzer(input, output, error, contractId)
        expect(functionCallAnalyzer.functionHash.value).toBeNull()
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBeNull()

        // 2) mount
        functionCallAnalyzer.mount()
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBeNull()
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBeNull()

        // 3) setup
        input.value = "0xf305d719000000000000000000000000000000000000000000000000000000000022d6de0000000000000000000000000000000000000000000000000000015076ac13000000000000000000000000000000000000000000000000000000014ec7ffb1a00000000000000000000000000000000000000000000000000000000f558e95eb00000000000000000000000000000000000000000000000000000000000f45b30000000000000000000000000000000000000000000000000000018cd5a698af"
        output.value = "0x"
        error.value = "0x08c379a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026556e69737761705632526f757465723a20494e53554646494349454e545f425f414d4f554e540000000000000000000000000000000000000000000000000000"
        contractId.value = "0.0.3045981"
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBe("0xf305d719")
        expect(functionCallAnalyzer.signature.value).toBe("addLiquidityETH(address,uint256,uint256,uint256,address,uint256)")
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([
            new NameTypeValue("token", "address", "0x000000000000000000000000000000000022D6de", null, null),
            new NameTypeValue("amountTokenDesired", "uint256", 1445100000000n, null, null),
            new NameTypeValue("amountTokenMin", "uint256", 1437874500000n, null, null),
            new NameTypeValue("amountETHMin", "uint256", 65859917291n, null, null),
            new NameTypeValue("to", "address", "0x00000000000000000000000000000000000f45b3", null, null),
            new NameTypeValue("deadline", "uint256", 1704391514287n, null, null),
        ])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBe("0x08c379a0")
        expect(functionCallAnalyzer.errorSignature.value).toBe("Error(string)")
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([
            new NameTypeValue("", "string", "UniswapV2Router: INSUFFICIENT_B_AMOUNT", null, null),
        ])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBe("0x000000000000000000000000000000000000000000000000000000000022d6de0000000000000000000000000000000000000000000000000000015076ac13000000000000000000000000000000000000000000000000000000014ec7ffb1a00000000000000000000000000000000000000000000000000000000f558e95eb00000000000000000000000000000000000000000000000000000000000f45b30000000000000000000000000000000000000000000000000000018cd5a698af")


        // 4) unmount
        functionCallAnalyzer.unmount()
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBe("0xf305d719")
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBe("0x000000000000000000000000000000000000000000000000000000000022d6de0000000000000000000000000000000000000000000000000000015076ac13000000000000000000000000000000000000000000000000000000014ec7ffb1a00000000000000000000000000000000000000000000000000000000f558e95eb00000000000000000000000000000000000000000000000000000000000f45b30000000000000000000000000000000000000000000000000000018cd5a698af")

        mock.restore()

    })

    test("Call to verified contract: new + setup + mount + unmount", async () => {

        const mock = new MockAdapter(axios);
        const matcher1 = "files/any/295/0x00000000000000000000000000000000002E7A5D"
        mock.onGet(matcher1).reply(200, SOURCIFY_RESPONSE)
        const matcher2 = "api/v1/contracts/" + CONTRACT_DETAILS.contract_id
        mock.onGet(matcher2).reply(200, CONTRACT_DETAILS)

        // 1) new
        const input: Ref<string | null> = ref(null)
        const output: Ref<string | null> = ref(null)
        const error: Ref<string | null> = ref(null)
        const contractId: Ref<string | null> = ref(null)
        const functionCallAnalyzer = new FunctionCallAnalyzer(input, output, error, contractId)
        expect(functionCallAnalyzer.functionHash.value).toBeNull()
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBeNull()

        // 2) setup
        input.value = "0xf305d719000000000000000000000000000000000000000000000000000000000022d6de0000000000000000000000000000000000000000000000000000015076ac13000000000000000000000000000000000000000000000000000000014ec7ffb1a00000000000000000000000000000000000000000000000000000000f558e95eb00000000000000000000000000000000000000000000000000000000000f45b30000000000000000000000000000000000000000000000000000018cd5a698af"
        output.value = "0x"
        error.value = "0x08c379a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026556e69737761705632526f757465723a20494e53554646494349454e545f425f414d4f554e540000000000000000000000000000000000000000000000000000"
        contractId.value = "0.0.3045981"
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBe("0xf305d719")
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBe("0x000000000000000000000000000000000000000000000000000000000022d6de0000000000000000000000000000000000000000000000000000015076ac13000000000000000000000000000000000000000000000000000000014ec7ffb1a00000000000000000000000000000000000000000000000000000000f558e95eb00000000000000000000000000000000000000000000000000000000000f45b30000000000000000000000000000000000000000000000000000018cd5a698af")

        // 3) mount
        functionCallAnalyzer.mount()
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBe("0xf305d719")
        expect(functionCallAnalyzer.signature.value).toBe("addLiquidityETH(address,uint256,uint256,uint256,address,uint256)")
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([
            new NameTypeValue("token", "address", "0x000000000000000000000000000000000022D6de", null, null),
            new NameTypeValue("amountTokenDesired", "uint256", 1445100000000n, null, null),
            new NameTypeValue("amountTokenMin", "uint256", 1437874500000n, null, null),
            new NameTypeValue("amountETHMin", "uint256", 65859917291n, null, null),
            new NameTypeValue("to", "address", "0x00000000000000000000000000000000000f45b3", null, null),
            new NameTypeValue("deadline", "uint256", 1704391514287n, null, null),
        ])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBe("0x08c379a0")
        expect(functionCallAnalyzer.errorSignature.value).toBe("Error(string)")
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([
            new NameTypeValue("", "string", "UniswapV2Router: INSUFFICIENT_B_AMOUNT", null, null),
        ])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBe("0x000000000000000000000000000000000000000000000000000000000022d6de0000000000000000000000000000000000000000000000000000015076ac13000000000000000000000000000000000000000000000000000000014ec7ffb1a00000000000000000000000000000000000000000000000000000000f558e95eb00000000000000000000000000000000000000000000000000000000000f45b30000000000000000000000000000000000000000000000000000018cd5a698af")


        // 4) unmount
        functionCallAnalyzer.unmount()
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBe("0xf305d719")
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBe("0x000000000000000000000000000000000000000000000000000000000022d6de0000000000000000000000000000000000000000000000000000015076ac13000000000000000000000000000000000000000000000000000000014ec7ffb1a00000000000000000000000000000000000000000000000000000000f558e95eb00000000000000000000000000000000000000000000000000000000000f45b30000000000000000000000000000000000000000000000000000018cd5a698af")

        mock.restore()

    })

    test("Call with signature declared on 4bytes.directory", async () => {

        SignatureCache.instance.clear()

        const functionHash = "0xf305d719"
        const mock = new MockAdapter(axios);
        const matcher1 = "https://www.4byte.directory/api/v1/signatures/?format=json&hex_signature=" + functionHash
        mock.onGet(matcher1).reply(200, BYTES4_RESPONSE)

        // 1) new
        const input: Ref<string | null> = ref(null)
        const output: Ref<string | null> = ref(null)
        const error: Ref<string | null> = ref(null)
        const contractId: Ref<string | null> = ref(null)
        const functionCallAnalyzer = new FunctionCallAnalyzer(input, output, error, contractId)
        expect(functionCallAnalyzer.functionHash.value).toBeNull()
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBeNull()

        // 2) mount
        functionCallAnalyzer.mount()
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBeNull()
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBeNull()

        // 3) setup
        input.value = "0xf305d719000000000000000000000000000000000000000000000000000000000022d6de0000000000000000000000000000000000000000000000000000015076ac13000000000000000000000000000000000000000000000000000000014ec7ffb1a00000000000000000000000000000000000000000000000000000000f558e95eb00000000000000000000000000000000000000000000000000000000000f45b30000000000000000000000000000000000000000000000000000018cd5a698af"
        output.value = "0x"
        error.value = "0x08c379a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026556e69737761705632526f757465723a20494e53554646494349454e545f425f414d4f554e540000000000000000000000000000000000000000000000000000"
        contractId.value = "0.0.3045981"
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBe("0xf305d719")
        expect(functionCallAnalyzer.signature.value).toBe("addLiquidityETH(address,uint256,uint256,uint256,address,uint256)")
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([
            new NameTypeValue("", "address", "0x000000000000000000000000000000000022D6de", null, null),
            new NameTypeValue("", "uint256", 1445100000000n, null, null),
            new NameTypeValue("", "uint256", 1437874500000n, null, null),
            new NameTypeValue("", "uint256", 65859917291n, null, null),
            new NameTypeValue("", "address", "0x00000000000000000000000000000000000f45b3", null, null),
            new NameTypeValue("", "uint256", 1704391514287n, null, null),
        ])

        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBe("0x000000000000000000000000000000000000000000000000000000000022d6de0000000000000000000000000000000000000000000000000000015076ac13000000000000000000000000000000000000000000000000000000014ec7ffb1a00000000000000000000000000000000000000000000000000000000f558e95eb00000000000000000000000000000000000000000000000000000000000f45b30000000000000000000000000000000000000000000000000000018cd5a698af")


        // 4) unmount
        functionCallAnalyzer.unmount()
        await flushPromises()
        expect(functionCallAnalyzer.functionHash.value).toBe("0xf305d719")
        expect(functionCallAnalyzer.signature.value).toBeNull()
        expect(functionCallAnalyzer.inputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.outputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.errorHash.value).toBeNull()
        expect(functionCallAnalyzer.errorSignature.value).toBeNull()
        expect(functionCallAnalyzer.errorInputs.value).toStrictEqual([])
        expect(functionCallAnalyzer.inputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.outputDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.errorDecodingStatus.value).toBeNull()
        expect(functionCallAnalyzer.inputArgsOnly.value).toBe("0x000000000000000000000000000000000000000000000000000000000022d6de0000000000000000000000000000000000000000000000000000015076ac13000000000000000000000000000000000000000000000000000000014ec7ffb1a00000000000000000000000000000000000000000000000000000000f558e95eb00000000000000000000000000000000000000000000000000000000000f45b30000000000000000000000000000000000000000000000000000018cd5a698af")

        mock.restore()


    })
})


const CONTRACT_DETAILS = {
    "admin_key": null,
    "auto_renew_account": "0.0.1058134",
    "auto_renew_period": 7776000,
    "contract_id": "0.0.3045981",
    "created_timestamp": "1687833512.379071003",
    "deleted": false,
    "evm_address": "0x00000000000000000000000000000000002e7a5d",
    "expiration_timestamp": "1695609512.379071003",
    "file_id": "0.0.3045977",
    "max_automatic_token_associations": 0,
    "memo": "",
    "nonce": null,
    "obtainer_id": null,
    "permanent_removal": null,
    "proxy_account_id": null,
    "timestamp": {
        "from": "1687833512.379071003",
        "to": null
    },
    "bytecode": "0x60e06040523480156200001157600080fd5b506040516200528d3803806200528d833981810160405260408110156200003757600080fd5b5080516020918201516001600160601b0319606083811b821660805282901b1660a05260408051637e062a3560e11b81529051929391926000926001600160a01b0385169263fc0c546a926004808301939282900301818787803b1580156200009f57600080fd5b505af1158015620000b4573d6000803e3d6000fd5b505050506040513d6020811015620000cb57600080fd5b50519050620000db3082620000f4565b60601b6001600160601b03191660c05250620002919050565b60006200010d83836200016a60201b6200362b1760201c565b90506016811462000165576040805162461bcd60e51b815260206004820152601f60248201527f536166652073696e676c65206173736f63696174696f6e206661696c65642100604482015290519081900360640190fd5b505050565b604080516001600160a01b038481166024830152831660448083019190915282518083039091018152606490910182526020810180516001600160e01b031663248a35ef60e11b17815291518151600093849360609361016793919290918291908083835b60208310620001f05780518252601f199092019160209182019101620001cf565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811462000254576040519150601f19603f3d011682016040523d82523d6000602084013e62000259565b606091505b5091509150816200026c57601562000285565b8080602001905160208110156200028257600080fd5b50515b60030b95945050505050565b60805160601c60a05160601c60c05160601c614e95620003f860003980610ecc5280610f0b528061106c528061128d52806116d65280611add5280611b6a5280611c9b5280611d865280611ec0528061224f52806122d452806123c9528061250b5280612bf75280612c5b5280612ee752806130e0528061318152806131da5280613392525080610f2c5280610f5352806112ae52806112ec5280611da75280611dce528061200652806123ea528061241152806125a45280612a3c5280612d48528061320e52806134d5525080610c525280610d0d52806110fa52806111d152806113b3528061157b5280611764528061187c5280611c275280611f53528061204e528061219f52806125d052806127fc52806129eb5280612a145280612aab5280612c2b5280612f145280612fd252806130af52806131b85280613425528061351d52806137565280613ded5280613e30528061410a52806142805250614e956000f3fe6080604052600436106101555760003560e01c80638803dbee116100c1578063c45a01551161007a578063c45a01551461098b578063d06ca61f146109a0578063d07e5b2814610a55578063e8e3370014610a6a578063f305d71914610acc578063f803710d14610b12578063fb3bdb4114610b5857610155565b80638803dbee1461075a578063a74d5086146107f0578063ad615dec14610821578063af2979eb14610857578063b6f9de95146108aa578063baa2abde1461092e57610155565b806338ed17391161011357806338ed1739146104465780634a25d94a146104dc5780635c11d79514610572578063791ac9471461060a5780637ff36ab5146106a057806385f8c2591461072457610155565b80629e421a1461015a57806302751cec146101cd578063054d50d41461023957806318cbafe5146102815780631f00ca74146103675780632e3cff6a1461041c575b600080fd5b6101af600480360361010081101561017157600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e00135610bdc565b60408051938452602084019290925282820152519081900360600190f35b3480156101d957600080fd5b50610220600480360360c08110156101f057600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a00135610e75565b6040805192835260208301919091528051918290030190f35b34801561024557600080fd5b5061026f6004803603606081101561025c57600080fd5b5080359060208101359060400135611007565b60408051918252519081900360200190f35b34801561028d57600080fd5b50610317600480360360a08110156102a457600080fd5b813591602081013591810190606081016040820135600160201b8111156102ca57600080fd5b8201836020820111156102dc57600080fd5b803590602001918460208302840111600160201b831117156102fd57600080fd5b91935091506001600160a01b03813516906020013561101c565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561035357818101518382015260200161033b565b505050509050019250505060405180910390f35b34801561037357600080fd5b506103176004803603604081101561038a57600080fd5b81359190810190604081016020820135600160201b8111156103ab57600080fd5b8201836020820111156103bd57600080fd5b803590602001918460208302840111600160201b831117156103de57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506113ac945050505050565b34801561042857600080fd5b5061026f6004803603602081101561043f57600080fd5b50356113e2565b34801561045257600080fd5b50610317600480360360a081101561046957600080fd5b813591602081013591810190606081016040820135600160201b81111561048f57600080fd5b8201836020820111156104a157600080fd5b803590602001918460208302840111600160201b831117156104c257600080fd5b91935091506001600160a01b038135169060200135611530565b3480156104e857600080fd5b50610317600480360360a08110156104ff57600080fd5b813591602081013591810190606081016040820135600160201b81111561052557600080fd5b82018360208201111561053757600080fd5b803590602001918460208302840111600160201b8311171561055857600080fd5b91935091506001600160a01b038135169060200135611686565b34801561057e57600080fd5b50610608600480360360a081101561059557600080fd5b813591602081013591810190606081016040820135600160201b8111156105bb57600080fd5b8201836020820111156105cd57600080fd5b803590602001918460208302840111600160201b831117156105ee57600080fd5b91935091506001600160a01b038135169060200135611812565b005b34801561061657600080fd5b50610608600480360360a081101561062d57600080fd5b813591602081013591810190606081016040820135600160201b81111561065357600080fd5b82018360208201111561066557600080fd5b803590602001918460208302840111600160201b8311171561068657600080fd5b91935091506001600160a01b038135169060200135611a8f565b610317600480360360808110156106b657600080fd5b81359190810190604081016020820135600160201b8111156106d757600080fd5b8201836020820111156106e957600080fd5b803590602001918460208302840111600160201b8311171561070a57600080fd5b91935091506001600160a01b038135169060200135611e78565b34801561073057600080fd5b5061026f6004803603606081101561074757600080fd5b5080359060208101359060400135612147565b34801561076657600080fd5b50610317600480360360a081101561077d57600080fd5b813591602081013591810190606081016040820135600160201b8111156107a357600080fd5b8201836020820111156107b557600080fd5b803590602001918460208302840111600160201b831117156107d657600080fd5b91935091506001600160a01b038135169060200135612154565b3480156107fc57600080fd5b5061080561224d565b604080516001600160a01b039092168252519081900360200190f35b34801561082d57600080fd5b5061026f6004803603606081101561084457600080fd5b5080359060208101359060400135612271565b34801561086357600080fd5b5061026f600480360360c081101561087a57600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a0013561227e565b610608600480360360808110156108c057600080fd5b81359190810190604081016020820135600160201b8111156108e157600080fd5b8201836020820111156108f357600080fd5b803590602001918460208302840111600160201b8311171561091457600080fd5b91935091506001600160a01b0381351690602001356124c5565b34801561093a57600080fd5b50610220600480360360e081101561095157600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359091169060c001356127ae565b34801561099757600080fd5b506108056129e9565b3480156109ac57600080fd5b50610317600480360360408110156109c357600080fd5b81359190810190604081016020820135600160201b8111156109e457600080fd5b8201836020820111156109f657600080fd5b803590602001918460208302840111600160201b83111715610a1757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612a0d945050505050565b348015610a6157600080fd5b50610805612a3a565b348015610a7657600080fd5b506101af6004803603610100811015610a8e57600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e00135612a5e565b6101af600480360360c0811015610ae257600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a00135612ba8565b6101af600480360360c0811015610b2857600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a00135612e7e565b61031760048036036080811015610b6e57600080fd5b81359190810190604081016020820135600160201b811115610b8f57600080fd5b820183602082011115610ba157600080fd5b803590602001918460208302840111600160201b83111715610bc257600080fd5b91935091506001600160a01b03813516906020013561334a565b60008060008342811015610c25576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b6040805163e6a4390560e01b81526001600160a01b038e811660048301528d8116602483015291516000927f0000000000000000000000000000000000000000000000000000000000000000169163e6a43905916044808301926020929190829003018186803b158015610c9857600080fd5b505afa158015610cac573d6000803e3d6000fd5b505050506040513d6020811015610cc257600080fd5b50516001600160a01b031614610d095760405162461bcd60e51b8152600401808060200182810382526024815260200180614c9b6024913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c9c65396348f8f6040518463ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b03168152602001925050506020604051808303818588803b158015610d8b57600080fd5b505af1158015610d9f573d6000803e3d6000fd5b50505050506040513d6020811015610db657600080fd5b50519050610dc88d8d8d8d8d8d61374b565b9095509350610dd98d33838861386b565b610de58c33838761386b565b806001600160a01b0316636a627842886040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b158015610e3457600080fd5b505af1158015610e48573d6000803e3d6000fd5b505050506040513d6020811015610e5e57600080fd5b5051949d939c50939a509198505050505050505050565b6000808242811015610ebc576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b610ec6308a613934565b610ef5897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a6127ae565b9093509150610f068930878661386b565b610f517f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008461399c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d9caed123087856040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015610fd957600080fd5b505af1158015610fed573d6000803e3d6000fd5b50505050610ffb308a613a4e565b50965096945050505050565b6000611014848484613a5a565b949350505050565b60608142811015611062576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686600019810181811061109c57fe5b905060200201356001600160a01b03166001600160a01b0316146110f5576040805162461bcd60e51b815260206004820152601d6024820152600080516020614d81833981519152604482015290519081900360640190fd5b6111537f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613b3292505050565b9150868260018451038151811061116657fe5b602002602001015110156111ab5760405162461bcd60e51b815260040180806020018281038252602b815260200180614dea602b913960400191505060405180910390fd5b611249868660008181106111bb57fe5b905060200201356001600160a01b03163361122f7f00000000000000000000000000000000000000000000000000000000000000008a8a60008181106111fd57fe5b905060200201356001600160a01b03168b8b600181811061121a57fe5b905060200201356001600160a01b0316613c7e565b8560008151811061123c57fe5b602002602001015161386b565b61128882878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250613d3e915050565b6112ea7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846001865103815181106112dd57fe5b602002602001015161399c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d9caed1230868560018751038151811061132b57fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561138957600080fd5b505af115801561139d573d6000803e3d6000fd5b50505050509695505050505050565b60606113d97f00000000000000000000000000000000000000000000000000000000000000008484613f7b565b90505b92915050565b60408051602480820184905282518083039091018152604490910182526020810180516001600160e01b031663171e7fb560e11b17815291518151600093849360609361016893919290918291908083835b602083106114535780518252601f199092019160209182019101611434565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146114b5576040519150601f19603f3d011682016040523d82523d6000602084013e6114ba565b606091505b509150915081611511576040805162461bcd60e51b815260206004820152601b60248201527f54696e7963656e7473546f54696e7962617273206661696c6564210000000000604482015290519081900360640190fd5b80806020019051602081101561152657600080fd5b5051949350505050565b60608142811015611576576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b6115d47f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613b3292505050565b915086826001845103815181106115e757fe5b6020026020010151101561162c5760405162461bcd60e51b815260040180806020018281038252602b815260200180614dea602b913960400191505060405180910390fd5b61163c868660008181106111bb57fe5b61167b82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613d3e915050565b509695505050505050565b606081428110156116cc576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686600019810181811061170657fe5b905060200201356001600160a01b03166001600160a01b03161461175f576040805162461bcd60e51b815260206004820152601d6024820152600080516020614d81833981519152604482015290519081900360640190fd5b6117bd7f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613f7b92505050565b915086826000815181106117cd57fe5b602002602001015111156111ab5760405162461bcd60e51b8152600401808060200182810382526027815260200180614d5a6027913960400191505060405180910390fd5b8042811015611856576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b6118cb8585600081811061186657fe5b905060200201356001600160a01b0316336118c57f0000000000000000000000000000000000000000000000000000000000000000898960008181106118a857fe5b905060200201356001600160a01b03168a8a600181811061121a57fe5b8a61386b565b6000858560001981018181106118dd57fe5b905060200201356001600160a01b03166001600160a01b03166370a08231856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561193957600080fd5b505afa15801561194d573d6000803e3d6000fd5b505050506040513d602081101561196357600080fd5b505160408051602088810282810182019093528882529293506119a59290918991899182918501908490808284376000920191909152508892506140b3915050565b86611a4882888860001981018181106119ba57fe5b905060200201356001600160a01b03166001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a1657600080fd5b505afa158015611a2a573d6000803e3d6000fd5b505050506040513d6020811015611a4057600080fd5b5051906143b5565b1015611a855760405162461bcd60e51b815260040180806020018281038252602b815260200180614dea602b913960400191505060405180910390fd5b5050505050505050565b8042811015611ad3576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685856000198101818110611b0d57fe5b905060200201356001600160a01b03166001600160a01b031614611b66576040805162461bcd60e51b815260206004820152601d6024820152600080516020614d81833981519152604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611bd557600080fd5b505afa158015611be9573d6000803e3d6000fd5b505050506040513d6020811015611bff57600080fd5b50519050611c598686600081611c1157fe5b905060200201356001600160a01b031633611c537f00000000000000000000000000000000000000000000000000000000000000008a8a60008181106111fd57fe5b8b61386b565b611c978686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506140b3915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611d0657600080fd5b505afa158015611d1a573d6000803e3d6000fd5b505050506040513d6020811015611d3057600080fd5b505190506000611d4082846143b5565b905088811015611d815760405162461bcd60e51b815260040180806020018281038252602b815260200180614dea602b913960400191505060405180910390fd5b611dcc7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008361399c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d9caed123088846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015611e5457600080fd5b505af1158015611e68573d6000803e3d6000fd5b5050505050505050505050505050565b60608142811015611ebe576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110611ef557fe5b905060200201356001600160a01b03166001600160a01b031614611f4e576040805162461bcd60e51b815260206004820152601d6024820152600080516020614d81833981519152604482015290519081900360640190fd5b611fac7f000000000000000000000000000000000000000000000000000000000000000034888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613b3292505050565b91508682600184510381518110611fbf57fe5b602002602001015110156120045760405162461bcd60e51b815260040180806020018281038252602b815260200180614dea602b913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f9609f088360008151811061204057fe5b6020026020010151336120977f00000000000000000000000000000000000000000000000000000000000000008b8b600081811061207a57fe5b905060200201356001600160a01b03168c8c600181811061121a57fe5b6040518463ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b03168152602001925050506000604051808303818588803b1580156120e557600080fd5b505af11580156120f9573d6000803e3d6000fd5b505050505061213d82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613d3e915050565b5095945050505050565b6000611014848484614405565b6060814281101561219a576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b6121f87f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613f7b92505050565b9150868260008151811061220857fe5b6020026020010151111561162c5760405162461bcd60e51b8152600401808060200182810382526027815260200180614d5a6027913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b60006110148484846144dd565b600081428110156122c4576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b6122ce3089613934565b6122fd887f000000000000000000000000000000000000000000000000000000000000000089898930896127ae565b604080516370a0823160e01b81523060048201529051919450600092506001600160a01b038b16916370a0823191602480820192602092909190829003018186803b15801561234b57600080fd5b505afa15801561235f573d6000803e3d6000fd5b505050506040513d602081101561237557600080fd5b50519050868110156123b85760405162461bcd60e51b815260040180806020018281038252602a815260200180614cbf602a913960400191505060405180910390fd5b6123c48930878461386b565b61240f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008561399c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d9caed123087866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561249757600080fd5b505af11580156124ab573d6000803e3d6000fd5b505050506124b9308a613a4e565b50509695505050505050565b8042811015612509576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585600081811061254057fe5b905060200201356001600160a01b03166001600160a01b031614612599576040805162461bcd60e51b815260206004820152601d6024820152600080516020614d81833981519152604482015290519081900360640190fd5b346001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f9609f0882336125fa7f00000000000000000000000000000000000000000000000000000000000000008b8b60008161207a57fe5b6040518463ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b03168152602001925050506000604051808303818588803b15801561264857600080fd5b505af115801561265c573d6000803e3d6000fd5b5050505050600086866001898990500381811061267557fe5b905060200201356001600160a01b03166001600160a01b03166370a08231866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156126d157600080fd5b505afa1580156126e5573d6000803e3d6000fd5b505050506040513d60208110156126fb57600080fd5b5051604080516020898102828101820190935289825292935061273d9290918a918a9182918501908490808284376000920191909152508992506140b3915050565b87611a48828989600019810181811061275257fe5b905060200201356001600160a01b03166001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a1657600080fd5b60008082428110156127f5576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b60006128227f00000000000000000000000000000000000000000000000000000000000000008c8c613c7e565b90506000816001600160a01b0316635fcbd2856040518163ffffffff1660e01b815260040160206040518083038186803b15801561285f57600080fd5b505afa158015612873573d6000803e3d6000fd5b505050506040513d602081101561288957600080fd5b505190506128998133848d61386b565b600080836001600160a01b03166389afcb448a6040518263ffffffff1660e01b815260040180826001600160a01b031681526020019150506040805180830381600087803b1580156128ea57600080fd5b505af11580156128fe573d6000803e3d6000fd5b505050506040513d604081101561291457600080fd5b5080516020909101519092509050600061292e8f8f614583565b509050806001600160a01b03168f6001600160a01b031614612951578183612954565b82825b90985096508b8810156129985760405162461bcd60e51b8152600401808060200182810382526026815260200180614da16026913960400191505060405180910390fd5b8a8710156129d75760405162461bcd60e51b8152600401808060200182810382526026815260200180614c756026913960400191505060405180910390fd5b50505050505097509795505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606113d97f00000000000000000000000000000000000000000000000000000000000000008484613b32565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008342811015612aa7576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a439058e8e6040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015612b2757600080fd5b505afa158015612b3b573d6000803e3d6000fd5b505050506040513d6020811015612b5157600080fd5b505190506001600160a01b038116612b9a5760405162461bcd60e51b8152600401808060200182810382526024815260200180614d116024913960400191505060405180910390fd5b610dc88d8d8d8d8d8d61374b565b60008060008342811015612bf1576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b612c1f8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c61374b565b809450819550505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a439058c7f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015612cc757600080fd5b505afa158015612cdb573d6000803e3d6000fd5b505050506040513d6020811015612cf157600080fd5b505190506001600160a01b038116612d3a5760405162461bcd60e51b8152600401808060200182810382526024815260200180614d116024913960400191505060405180910390fd5b612d468b33838861386b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f9609f088533846040518463ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b03168152602001925050506000604051808303818588803b158015612dc657600080fd5b505af1158015612dda573d6000803e3d6000fd5b5050505050806001600160a01b0316636a627842886040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b158015612e2e57600080fd5b505af1158015612e42573d6000803e3d6000fd5b505050506040513d6020811015612e5857600080fd5b5051925034841015612e7057612e7033853403614661565b505096509650969350505050565b60008060008342811015612ec7576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b6040805163e6a4390560e01b81526001600160a01b038c811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015291516000927f0000000000000000000000000000000000000000000000000000000000000000169163e6a43905916044808301926020929190829003018186803b158015612f5a57600080fd5b505afa158015612f6e573d6000803e3d6000fd5b505050506040513d6020811015612f8457600080fd5b50516001600160a01b031614612fcb5760405162461bcd60e51b8152600401808060200182810382526024815260200180614c9b6024913960400191505060405180910390fd5b600061305a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663881a075a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561302957600080fd5b505afa15801561303d573d6000803e3d6000fd5b505050506040513d602081101561305357600080fd5b50516113e2565b90508034116130ad576040805162461bcd60e51b815260206004820152601a602482015279556e69737761705632526f757465723a204d53472e56414c554560301b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c9c65396828d7f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b03168152602001925050506020604051808303818588803b15801561314d57600080fd5b505af1158015613161573d6000803e3d6000fd5b50505050506040513d602081101561317857600080fd5b506131ac90508b7f00000000000000000000000000000000000000000000000000000000000000008c348590038d8d61374b565b909550935060006131fe7f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000613c7e565b905061320c8c33838961386b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f9609f088633846040518463ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b03168152602001925050506000604051808303818588803b15801561328c57600080fd5b505af11580156132a0573d6000803e3d6000fd5b5050505050806001600160a01b0316636a627842896040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b1580156132f457600080fd5b505af1158015613308573d6000803e3d6000fd5b505050506040513d602081101561331e57600080fd5b505193503482900385101561333b5761333b338684340303614661565b50505096509650969350505050565b60608142811015613390576040805162461bcd60e51b81526020600482015260186024820152600080516020614e40833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316868660008181106133c757fe5b905060200201356001600160a01b03166001600160a01b031614613420576040805162461bcd60e51b815260206004820152601d6024820152600080516020614d81833981519152604482015290519081900360640190fd5b61347e7f000000000000000000000000000000000000000000000000000000000000000088888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613f7b92505050565b9150348260008151811061348e57fe5b602002602001015111156134d35760405162461bcd60e51b8152600401808060200182810382526027815260200180614d5a6027913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f9609f088360008151811061350f57fe5b6020026020010151336135497f00000000000000000000000000000000000000000000000000000000000000008b8b600081811061207a57fe5b6040518463ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b03168152602001925050506000604051808303818588803b15801561359757600080fd5b505af11580156135ab573d6000803e3d6000fd5b50505050506135ef82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613d3e915050565b816000815181106135fc57fe5b602002602001015134111561213d5761213d338360008151811061361c57fe5b60200260200101513403614661565b604080516001600160a01b038481166024830152831660448083019190915282518083039091018152606490910182526020810180516001600160e01b031663248a35ef60e11b17815291518151600093849360609361016793919290918291908083835b602083106136af5780518252601f199092019160209182019101613690565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613711576040519150601f19603f3d011682016040523d82523d6000602084013e613716565b606091505b50915091508161372757601561373f565b80806020019051602081101561373c57600080fd5b50515b60030b95945050505050565b60008060008061377c7f00000000000000000000000000000000000000000000000000000000000000008b8b614754565b9150915081600014801561378e575080155b1561379e5787935086925061385e565b60006137ab8984846144dd565b90508781116137fe57858110156137f35760405162461bcd60e51b8152600401808060200182810382526026815260200180614c756026913960400191505060405180910390fd5b88945092508261385c565b600061380b8984866144dd565b90508981111561381757fe5b878110156138565760405162461bcd60e51b8152600401808060200182810382526026815260200180614da16026913960400191505060405180910390fd5b94508793505b505b5050965096945050505050565b600061388185858561387c8661481b565b614868565b9050601681146138d8576040805162461bcd60e51b815260206004820152601b60248201527f5361666520746f6b656e207472616e73666572206661696c6564210000000000604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b03167f831ac82b07fb396dafef0077cea6e002235d88e63f35cbd5df2c065107f1e74a84604051808267ffffffffffffffff16815260200191505060405180910390a35050505050565b6000613940838361362b565b905060168114613997576040805162461bcd60e51b815260206004820152601f60248201527f536166652073696e676c65206173736f63696174696f6e206661696c65642100604482015290519081900360640190fd5b505050565b60006139b184846139ac8561481b565b61499c565b9050601681146139ff576040805162461bcd60e51b81526020600482015260146024820152735361666520617070726f7665206661696c65642160601b604482015290519081900360640190fd5b6040805167ffffffffffffffff8416815290516001600160a01b038516917fdece45634c9b2787e4a3beb04937674cb331abb1e6ce01b6febe8f4d69717280919081900360200190a250505050565b60006139408383614ac7565b6000808411613a9a5760405162461bcd60e51b815260040180806020018281038252602b815260200180614e15602b913960400191505060405180910390fd5b600083118015613aaa5750600082115b613ae55760405162461bcd60e51b8152600401808060200182810382526028815260200180614ce96028913960400191505060405180910390fd5b6000613af3856103e5614b4a565b90506000613b018285614b4a565b90506000613b1b83613b15886103e8614b4a565b90614bad565b9050808281613b2657fe5b04979650505050505050565b6060600282511015613b8b576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015290519081900360640190fd5b815167ffffffffffffffff81118015613ba357600080fd5b50604051908082528060200260200182016040528015613bcd578160200160208202803683370190505b5090508281600081518110613bde57fe5b60200260200101818152505060005b6001835103811015613c7657600080613c3087868581518110613c0c57fe5b6020026020010151878660010181518110613c2357fe5b6020026020010151614754565b91509150613c52848481518110613c4357fe5b60200260200101518383613a5a565b848460010181518110613c6157fe5b60209081029190910101525050600101613bed565b509392505050565b6000806000613c8d8585614583565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501206001600160f81b031960688401529a90941b9093166069840152607d8301989098527f407b3b02625070246aa1a1a346747a190d54149fc468122d6934af99b6ad0e6a609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b60005b6001835103811015613f7557600080848381518110613d5c57fe5b6020026020010151858460010181518110613d7357fe5b6020026020010151915091506000613d8b8383614583565b5090506000878560010181518110613d9f57fe5b60200260200101519050600080836001600160a01b0316866001600160a01b031614613dcd57826000613dd1565b6000835b91509150600060028a51038810613de85788613e29565b613e297f0000000000000000000000000000000000000000000000000000000000000000878c8b60020181518110613e1c57fe5b6020026020010151613c7e565b9050613e567f00000000000000000000000000000000000000000000000000000000000000008888613c7e565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015613e93576020820181803683370190505b506040518563ffffffff1660e01b815260040180858152602001848152602001836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613efb578181015183820152602001613ee3565b50505050905090810190601f168015613f285780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015613f4a57600080fd5b505af1158015613f5e573d6000803e3d6000fd5b505060019099019850613d41975050505050505050565b50505050565b6060600282511015613fd4576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015290519081900360640190fd5b815167ffffffffffffffff81118015613fec57600080fd5b50604051908082528060200260200182016040528015614016578160200160208202803683370190505b509050828160018351038151811061402a57fe5b60209081029190910101528151600019015b8015613c765760008061406c8786600186038151811061405857fe5b6020026020010151878681518110613c2357fe5b9150915061408e84848151811061407f57fe5b60200260200101518383614405565b84600185038151811061409d57fe5b602090810291909101015250506000190161403c565b60005b6001835103811015613997576000808483815181106140d157fe5b60200260200101518584600101815181106140e857fe5b60200260200101519150915060006141008383614583565b50905060006141307f00000000000000000000000000000000000000000000000000000000000000008585613c7e565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561417157600080fd5b505afa158015614185573d6000803e3d6000fd5b505050506040513d606081101561419b57600080fd5b5080516020909101516001600160701b0391821693501690506000806001600160a01b038a8116908916146141d15782846141d4565b83835b91509150614229828b6001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a1657600080fd5b9550614236868383613a5a565b945050505050600080856001600160a01b0316886001600160a01b03161461426057826000614264565b6000835b91509150600060028c51038a1061427b578a6142af565b6142af7f0000000000000000000000000000000000000000000000000000000000000000898e8d60020181518110613e1c57fe5b604080516000808252602082019283905263022c0d9f60e01b835260248201878152604483018790526001600160a01b038086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b83811015614339578181015183820152602001614321565b50505050905090810190601f1680156143665780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561438857600080fd5b505af115801561439c573d6000803e3d6000fd5b50506001909b019a506140b69950505050505050505050565b808203828111156113dc576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b60008084116144455760405162461bcd60e51b815260040180806020018281038252602c815260200180614c24602c913960400191505060405180910390fd5b6000831180156144555750600082115b6144905760405162461bcd60e51b8152600401808060200182810382526028815260200180614ce96028913960400191505060405180910390fd5b60006144a86103e86144a28688614b4a565b90614b4a565b905060006144bc6103e56144a286896143b5565b90506144d360018284816144cc57fe5b0490614bad565b9695505050505050565b600080841161451d5760405162461bcd60e51b8152600401808060200182810382526025815260200180614d356025913960400191505060405180910390fd5b60008311801561452d5750600082115b6145685760405162461bcd60e51b8152600401808060200182810382526028815260200180614ce96028913960400191505060405180910390fd5b826145738584614b4a565b8161457a57fe5b04949350505050565b600080826001600160a01b0316846001600160a01b031614156145d75760405162461bcd60e51b8152600401808060200182810382526025815260200180614c506025913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b0316106145f75782846145fa565b83835b90925090506001600160a01b03821661465a576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015290519081900360640190fd5b9250929050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106146ad5780518252601f19909201916020918201910161468e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461470f576040519150601f19603f3d011682016040523d82523d6000602084013e614714565b606091505b50509050806139975760405162461bcd60e51b8152600401808060200182810382526023815260200180614dc76023913960400191505060405180910390fd5b60008060006147638585614583565b509050600080614774888888613c7e565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156147ac57600080fd5b505afa1580156147c0573d6000803e3d6000fd5b505050506040513d60608110156147d657600080fd5b5080516020909101516001600160701b0391821693501690506001600160a01b038781169084161461480957808261480c565b81815b90999098509650505050505050565b6000677fffffffffffffff8211156148645760405162461bcd60e51b8152600401808060200182810382526027815260200180614bfd6027913960400191505060405180910390fd5b5090565b604080516001600160a01b038681166024830152858116604483015284166064820152600783900b6084808301919091528251808303909101815260a490910182526020810180516001600160e01b031663eca3691760e01b17815291518151600093849360609361016793919290918291908083835b602083106148fe5780518252601f1990920191602091820191016148df565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614960576040519150601f19603f3d011682016040523d82523d6000602084013e614965565b606091505b50915091508161497657601561498e565b80806020019051602081101561498b57600080fd5b50515b60030b979650505050505050565b604080516001600160a01b03858116602483015284166044820152600783900b60648083019190915282518083039091018152608490910182526020810180516001600160e01b031663e1f21c6760e01b17815291518151600093849360609361016793919290918291908083835b60208310614a2a5780518252601f199092019160209182019101614a0b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614a8c576040519150601f19603f3d011682016040523d82523d6000602084013e614a91565b606091505b509150915081614aa2576015614aba565b808060200190516020811015614ab757600080fd5b50515b60030b9695505050505050565b604080516001600160a01b038481166024830152831660448083019190915282518083039091018152606490910182526020810180516001600160e01b0316630132f29d60e31b1781529151815160009384936060936101679391929091829190808383602083106136af5780518252601f199092019160209182019101613690565b6000811580614b6557505080820282828281614b6257fe5b04145b6113dc576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b808201828110156113dc576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe53616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743634556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553556e69737761705632526f757465723a20494e53554646494349454e545f425f414d4f554e54556e69737761705632526f757465723a20504f4f4c20414c524541445920455849535453556e69737761705632526f757465723a20494e53554646494349454e545f415f414d4f554e545f464f54556e697377617056324c6962726172793a20494e53554646494349454e545f4c4951554944495459556e69737761705632526f757465723a205041495220444f4553204e4f54204558495354556e697377617056324c6962726172793a20494e53554646494349454e545f414d4f554e54556e69737761705632526f757465723a204558434553534956455f494e5055545f414d4f554e54556e69737761705632526f757465723a20494e56414c49445f50415448000000556e69737761705632526f757465723a20494e53554646494349454e545f415f414d4f554e545472616e7366657248656c7065723a204554485f5452414e534645525f4641494c4544556e69737761705632526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056324c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54556e69737761705632526f757465723a20455850495245440000000000000000a26469706673582212205dd71bf7036e8e401a228b3eb7382b2e9c2a4320e6c1accc6ef06a3f5bc0b4d564736f6c634300060c0033",
    "runtime_bytecode": ""
}

const SOURCIFY_RESPONSE = {
    "status": "partial",
    "files": [
        {
            "name": "immutable-references.json",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/immutable-references.json",
            "content": "{\"19\":[{\"length\":32,\"start\":3154},{\"length\":32,\"start\":3341},{\"length\":32,\"start\":4346},{\"length\":32,\"start\":4561},{\"length\":32,\"start\":5043},{\"length\":32,\"start\":5499},{\"length\":32,\"start\":5988},{\"length\":32,\"start\":6268},{\"length\":32,\"start\":7207},{\"length\":32,\"start\":8019},{\"length\":32,\"start\":8270},{\"length\":32,\"start\":8607},{\"length\":32,\"start\":9680},{\"length\":32,\"start\":10236},{\"length\":32,\"start\":10731},{\"length\":32,\"start\":10772},{\"length\":32,\"start\":10923},{\"length\":32,\"start\":11307},{\"length\":32,\"start\":12052},{\"length\":32,\"start\":12242},{\"length\":32,\"start\":12463},{\"length\":32,\"start\":12728},{\"length\":32,\"start\":13349},{\"length\":32,\"start\":13597},{\"length\":32,\"start\":14166},{\"length\":32,\"start\":15853},{\"length\":32,\"start\":15920},{\"length\":32,\"start\":16650},{\"length\":32,\"start\":17024}],\"22\":[{\"length\":32,\"start\":3884},{\"length\":32,\"start\":3923},{\"length\":32,\"start\":4782},{\"length\":32,\"start\":4844},{\"length\":32,\"start\":7591},{\"length\":32,\"start\":7630},{\"length\":32,\"start\":8198},{\"length\":32,\"start\":9194},{\"length\":32,\"start\":9233},{\"length\":32,\"start\":9636},{\"length\":32,\"start\":10812},{\"length\":32,\"start\":11592},{\"length\":32,\"start\":12814},{\"length\":32,\"start\":13525}],\"25\":[{\"length\":32,\"start\":3788},{\"length\":32,\"start\":3851},{\"length\":32,\"start\":4204},{\"length\":32,\"start\":4749},{\"length\":32,\"start\":5846},{\"length\":32,\"start\":6877},{\"length\":32,\"start\":7018},{\"length\":32,\"start\":7323},{\"length\":32,\"start\":7558},{\"length\":32,\"start\":7872},{\"length\":32,\"start\":8783},{\"length\":32,\"start\":8916},{\"length\":32,\"start\":9161},{\"length\":32,\"start\":9483},{\"length\":32,\"start\":11255},{\"length\":32,\"start\":11355},{\"length\":32,\"start\":12007},{\"length\":32,\"start\":12512},{\"length\":32,\"start\":12673},{\"length\":32,\"start\":12762},{\"length\":32,\"start\":13202}]}"
        },
        {
            "name": "metadata.json",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/metadata.json",
            "content": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WHBAR\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WHBAR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHNewPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityNewPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tinycents\",\"type\":\"uint256\"}],\"name\":\"tinycentsToTinybars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tinybars\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whbar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/UniswapV2Router02.sol\":\"UniswapV2Router02\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":99},\"remappings\":[]},\"sources\":{\"project:/contracts/UniswapV2Router02.sol\":{\"keccak256\":\"0x4c9696d90dc1868c2372b461da86299941ff63594185a80fc7213a118b0ff51c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://09fa4a34ee11005991e26255f95d594c7cd0e837d9b3ca75e1035cc91e2421ad\",\"dweb:/ipfs/QmbKThD454CAvKewSsH2JE8ho1ogqhCvTf7HNZfo7FJ488\"]},\"project:/contracts/hedera/HederaResponseCodes.sol\":{\"keccak256\":\"0x1cc4283cc20d6c832d3ed47c7d66cad5217a0948b0a1b76d124fe14892e7fef7\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0cf17ce1eccb9b22d0c6a732208b8eb28e0f764ee3f7031e982ffb0a07c1063b\",\"dweb:/ipfs/QmZ5mTWxbeBxbdqGBdUTS2fAQVqdHcY3itYQK15c4eFS21\"]},\"project:/contracts/hedera/HederaTokenService.sol\":{\"keccak256\":\"0xfcf0c3f4e5963264c924932c3fcb0e45d621349fda664dd5eb604afd84bf1865\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://107952e5ad3d1054af826afa036af4d3ed9af011052911cbca36c15a9f95b28f\",\"dweb:/ipfs/QmSmvzHbF14SwmPctYXK5zSDKK5MQcAbE7d9HsdxdLS73Q\"]},\"project:/contracts/hedera/IExchangeRate.sol\":{\"keccak256\":\"0x353bc13da787da098536f9d2b88e6994135dcfa61bc3b052e2fb68a6dd53208e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1712188ee464769d4632e81eb93043a1cda0d97c627cff56d2b4c945b0127db6\",\"dweb:/ipfs/QmTuhCnhtNdKjdYfsjLADky11Quw6MDqsV7wJ4vD4S87Gj\"]},\"project:/contracts/hedera/IHederaTokenService.sol\":{\"keccak256\":\"0x890fe15d7269eee82d48d9ab2984b4b1f9b6e4c67932e98e884a3b1aa7863411\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://e0c6edd045522d5d0bfe1395b3f5515ee2b88e2d2cdb69d6fd0b844e32bd5502\",\"dweb:/ipfs/QmRs7KpK32X7nXkiYUk26MUVvNhhNhbYpr4f7xKic75vfD\"]},\"project:/contracts/hedera/SafeHederaTokenService.sol\":{\"keccak256\":\"0x2d60977667c7e6118f915090e870ee0bfa767e5c02972befcdc9c3a731ae4197\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5c899b2ba6b18c59cb229357959fa83d7d4e127310434d37d1e7d2c44bb8d44b\",\"dweb:/ipfs/QmUBNxGf51WixyGNbzHrz7idJQCjCmuJDaMCwmwrFLqGMf\"]},\"project:/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x5023e3bc1e2a2827721d26c02c265856d8918058995817c4f0d065267db2ca55\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://c3618188ff4cad3cc7dac381e9969182372971a3ee97b73411ab89923bdfbfe2\",\"dweb:/ipfs/QmPwh1D6jugaE4JTvajfH5SXoEFynbcwGUM9VdnW6gaWg8\"]},\"project:/contracts/interfaces/IUniswapV2Factory.sol\":{\"keccak256\":\"0x78118ad2334fb94be47798d43d7afe27628559bb8e21a04e5b021eb14d1e0f77\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://4c6b660602fc758d8483df93381f796fc935ac059b518a543aca59065e80c9b7\",\"dweb:/ipfs/QmZYiuKdDUabD3ZMZ7WTtRuKdVS2T19Qi52gFzAg7gUvTg\"]},\"project:/contracts/interfaces/IUniswapV2Pair.sol\":{\"keccak256\":\"0xf2f6f46f2471cdf555583c0c2ce1e54c535d2dbcbc3dfc2cd1d14b31c925d8ec\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a4400ea17a9f9442597d0477d2073bea485a74a67e295cf9d0de5ed2d5d39806\",\"dweb:/ipfs/QmSvuJzt7A91j2RYht5cnRQX1myHyChYsmHVTFPi38ZwHW\"]},\"project:/contracts/interfaces/IUniswapV2Router01.sol\":{\"keccak256\":\"0x597f254cb8324c788d8038649fd7fef11984adbb0238f2f4d940f2156dbde763\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://f23d33d41fe8397b05c8e5a309017db2219d78fe74df05ff6a213dd713991fc6\",\"dweb:/ipfs/QmaPaJRH1qWEJ7dzqM4BJQ93Xdysjjxgh2HktNu65SiqzN\"]},\"project:/contracts/interfaces/IUniswapV2Router02.sol\":{\"keccak256\":\"0xe9cc61b753e42d0f550efde8402d2e0e8b9436ed2e790313d36cdaca84ce7cf1\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://cd9441a0859b2bdc124b37d3344c1012f86584e7ab7d7da665d4eed7afefe3fc\",\"dweb:/ipfs/QmXDm8AYncrUQL17iZjmQs5TSgZ6aYuEua5F919MrcuRHn\"]},\"project:/contracts/interfaces/IWHBAR.sol\":{\"keccak256\":\"0x0a1899299272081d044a5e7747e6bb008772ece32864dc22b6c8b7d29b13b2ce\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://849230242ca57c1dea6c721a39d985bf229818ff50d4f7a236cc066d8e09c67a\",\"dweb:/ipfs/QmSwpE7DRP8RhJmWsjz2A9HKXVgcwSrEbfxGJqxqcnASBp\"]},\"project:/contracts/libraries/SafeCast.sol\":{\"keccak256\":\"0x2c45b11375671f94917b89564bf0fed52aece58625badb0599defed18820b4ad\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://27d51bba8ba8e32f4420d06a770b0812176e868c61ff366bd439d7caa4d8343c\",\"dweb:/ipfs/QmPVMBfVrgJVLF2buy2qyKeDH1DbVEUeDHbUPUNjGfhYrH\"]},\"project:/contracts/libraries/SafeMath.sol\":{\"keccak256\":\"0x97845129a51dbb1869a765595d1c671fa473b97ef800756402afaadc7640a94e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5928803fe14654103d3f15b57b5b8df40b98f58cbe4e7044888f092f2462af04\",\"dweb:/ipfs/QmdnB83EBtNjwoKFHizxsTo6e2ytKN97SCvYnX28p75DCu\"]},\"project:/contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x941d6f149dfbe18afb226c31d5f34f8905b7ab119ac6dae01586c5ceee8c45b3\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://51db5f7bb66f597def258cf05b410927c11ec8e57a9fb5bf148f24089fcc0416\",\"dweb:/ipfs/QmUUm8yfhxtSjFJ8wxPZukT8415iRnUWKtPUSnasXfi9Wg\"]},\"project:/contracts/libraries/UniswapV2Library.sol\":{\"keccak256\":\"0xd08ed3b68bd3ef13314ee0435d566423bf942181b3f574ff952a2bdce7311bca\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://1f8fe8859b744e1f1ce74561847aecb2ac614dc04f402648eebc783cc868602f\",\"dweb:/ipfs/QmPNjfUnHXXQTftnV9kQCkjUfxKrhqj9z6ujiyWxUt65tJ\"]}},\"version\":1}"
        },
        {
            "name": "UniswapV2Router02.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/UniswapV2Router02.sol",
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\nimport './interfaces/IUniswapV2Router02.sol';\nimport './interfaces/IUniswapV2Factory.sol';\nimport './libraries/UniswapV2Library.sol';\nimport './libraries/TransferHelper.sol';\nimport './hedera/SafeHederaTokenService.sol';\nimport './libraries/SafeMath.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IWHBAR.sol';\n\ncontract UniswapV2Router02 is IUniswapV2Router02, SafeHederaTokenService {\n    using SafeMath for uint;\n\n    address public immutable override factory;\n    address public immutable override WHBAR; // the contract addr\n    address public immutable override whbar; // the token addr\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');\n        _;\n    }\n\n    constructor(address _factory, address _WHBAR) public {\n        factory = _factory;\n        WHBAR = _WHBAR;\n        address _whbar = IWHBAR(_WHBAR).token();\n        safeAssociateToken(address(this), _whbar);\n        whbar = _whbar;\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin\n    ) internal virtual view returns (uint amountA, uint amountB) {\n        (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function addLiquidityNewPool(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external virtual payable override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\n        \n        require (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0), \"UniswapV2Router: POOL ALREADY EXISTS\");\n        address pair = IUniswapV2Factory(factory).createPair{value: msg.value}(tokenA, tokenB);\n        \n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n\n        safeTransferToken(\n            tokenA, msg.sender, pair, amountA\n        );\n        safeTransferToken(\n            tokenB, msg.sender, pair, amountB\n        );\n        liquidity = IUniswapV2Pair(pair).mint(to);\n    }\n    \n    function addLiquidityETHNewPool(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external virtual payable override ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n        require (IUniswapV2Factory(factory).getPair(token, whbar) == address(0), \"UniswapV2Router: POOL ALREADY EXISTS\");\n        uint256 feeInTinybars = tinycentsToTinybars(IUniswapV2Factory(factory).pairCreateFee());\n        require(msg.value > feeInTinybars, 'UniswapV2Router: MSG.VALUE');\n        IUniswapV2Factory(factory).createPair{value: feeInTinybars}(token, whbar);\n\n        (amountToken, amountETH) = _addLiquidity(token, whbar, amountTokenDesired, msg.value - feeInTinybars, amountTokenMin, amountETHMin);\n        address pair = UniswapV2Library.pairFor(factory, token, whbar);\n        \n        safeTransferToken(\n            token, msg.sender, pair, amountToken\n        );\n        IWHBAR(WHBAR).deposit{value: amountETH}(msg.sender, pair);\n        liquidity = IUniswapV2Pair(pair).mint(to);\n        if (msg.value - feeInTinybars > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - feeInTinybars - amountETH);\n    }\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\n        address pair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\n        require(pair != address(0), \"UniswapV2Router: PAIR DOES NOT EXIST\");\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        \n        safeTransferToken(\n            tokenA, msg.sender, pair, amountA\n        );\n        safeTransferToken(\n            tokenB, msg.sender, pair, amountB\n        );\n        liquidity = IUniswapV2Pair(pair).mint(to);\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            whbar,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n\n        address pair = IUniswapV2Factory(factory).getPair(token, whbar);\n        require(pair != address(0), \"UniswapV2Router: PAIR DOES NOT EXIST\");\n\n        safeTransferToken(\n            token, msg.sender, pair, amountToken\n        );\n        IWHBAR(WHBAR).deposit{value: amountETH}(msg.sender, pair);\n        liquidity = IUniswapV2Pair(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        address lpToken = IUniswapV2Pair(pair).lpToken();\n\n        safeTransferToken(\n            lpToken, msg.sender, pair, liquidity\n        );\n        (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);\n        (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\n        require(amountB >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');\n    }\n\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\n        safeAssociateToken(address(this), token);\n        (amountToken, amountETH) = removeLiquidity( \n            token,\n            whbar, \n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this), // used to be msg.sender\n            deadline\n        );\n        safeTransferToken(token, address(this), to, amountToken);\n        safeApproveToken(whbar, WHBAR, amountETH);\n        IWHBAR(WHBAR).withdraw(address(this), to, amountETH);\n        safeDissociateToken(address(this), token);\n    }\n\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\n            safeAssociateToken(address(this), token);\n            (, amountETH) = removeLiquidity(\n                token,\n                whbar, \n                liquidity,\n                amountTokenMin,\n                amountETHMin,\n                address(this),\n                deadline\n            );\n            uint256 amountToSend = IERC20(token).balanceOf(address(this));\n            require(amountToSend >= amountTokenMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT_FOT'); // second slippage check\n            safeTransferToken(token, address(this), to, amountToSend);\n            safeApproveToken(whbar, WHBAR, amountETH);\n            IWHBAR(WHBAR).withdraw(address(this), to, amountETH);\n            safeDissociateToken(address(this), token);\n    }\n    \n    // **** SWAP ****\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(\n                amount0Out, amount1Out, to, new bytes(0)\n            );\n        }\n    }\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n\n        safeTransferToken(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\n\n        safeTransferToken(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n \n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == whbar, 'UniswapV2Router: INVALID_PATH');\n        amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWHBAR(WHBAR).deposit{value: amounts[0]}(msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]));\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == whbar, 'UniswapV2Router: INVALID_PATH');\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\n        safeTransferToken(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        \n        _swap(amounts, path, address(this));\n        safeApproveToken(whbar, WHBAR, amounts[amounts.length - 1]);       \n        IWHBAR(WHBAR).withdraw(address(this), to, amounts[amounts.length - 1]);\n    }\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == whbar, 'UniswapV2Router: INVALID_PATH');\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n\n        safeTransferToken(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n\n        _swap(amounts, path, address(this));   \n        safeApproveToken(whbar, WHBAR, amounts[amounts.length - 1]);  \n        IWHBAR(WHBAR).withdraw(address(this), to, amounts[amounts.length - 1]);\n    }\n\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == whbar, 'UniswapV2Router: INVALID_PATH');\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= msg.value, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\n        IWHBAR(WHBAR).deposit{value: amounts[0]}(msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]));\n        _swap(amounts, path, to);\n        // refund dust eth, if any\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n    }\n\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\n            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output));\n            uint amountInput;\n            uint amountOutput;\n            { // scope to avoid stack too deep errors\n            (uint reserve0, uint reserve1,) = pair.getReserves();\n            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n            amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) {\n        \n        safeTransferToken(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn\n        );\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n    {\n        require(path[0] == whbar, 'UniswapV2Router: INVALID_PATH');\n        uint amountIn = msg.value;\n        IWHBAR(WHBAR).deposit{value: amountIn}(msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]));\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n    {\n        require(path[path.length - 1] == whbar, 'UniswapV2Router: INVALID_PATH');\n        uint startAmount = IERC20(whbar).balanceOf(address(this));\n        safeTransferToken(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn\n        );\n        _swapSupportingFeeOnTransferTokens(path, address(this));\n        uint endAmount = IERC20(whbar).balanceOf(address(this));\n        uint amountOut = endAmount.sub(startAmount);\n        require(amountOut >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        safeApproveToken(whbar, WHBAR, amountOut);\n        IWHBAR(WHBAR).withdraw(address(this), to, amountOut);\n    }\n\n    // **** LIBRARY FUNCTIONS ****\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\n        return UniswapV2Library.quote(amountA, reserveA, reserveB);\n    }\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\n        public\n        pure\n        virtual\n        override\n        returns (uint amountOut)\n    {\n        return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\n        public\n        pure\n        virtual\n        override\n        returns (uint amountIn)\n    {\n        return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(uint amountIn, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint[] memory amounts)\n    {\n        return UniswapV2Library.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(uint amountOut, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint[] memory amounts)\n    {\n        return UniswapV2Library.getAmountsIn(factory, amountOut, path);\n    }\n}\n"
        },
        {
            "name": "HederaResponseCodes.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/hedera/HederaResponseCodes.sol",
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity =0.6.12;\n\nabstract contract HederaResponseCodes {\n    \n    // response codes - check hedera hashgraph github repo for complete list\n    int32 internal constant UNKNOWN = 21; // The responding node has submitted the transaction to the network. Its final status is still unknown.\n    int32 internal constant SUCCESS = 22; // The transaction succeeded\n\n}"
        },
        {
            "name": "HederaTokenService.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/hedera/HederaTokenService.sol",
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.5.0 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport \"./HederaResponseCodes.sol\";\nimport \"./IHederaTokenService.sol\";\nimport \"./IExchangeRate.sol\";\n\nabstract contract HederaTokenService is HederaResponseCodes {\n\n    address internal constant precompileAddress = address(0x167);\n    address internal constant exchangeRatePrecompileAddress = address(0x168);\n\n    uint internal constant ADMIN_KEY_TYPE = 1;   \n    uint internal constant KYC_KEY_TYPE = 2;\n    uint internal constant FREEZE_KEY_TYPE = 4;\n    uint internal constant WIPE_KEY_TYPE = 8;\n    uint internal constant SUPPLY_KEY_TYPE = 16;\n    uint internal constant FEE_SCHEDULE_KEY_TYPE = 32;\n    uint internal constant PAUSE_KEY_TYPE = 64;\n    \n    uint256 internal constant TINY_PARTS_PER_WHOLE = 100_000_000;\n    uint32 internal constant DEFAULT_AUTO_RENEW_PERIOD = 7776000;\n\n    modifier nonEmptyExpiry(IHederaTokenService.HederaToken memory token)\n    {\n        if (token.expiry.second == 0 && token.expiry.autoRenewPeriod == 0) {\n            token.expiry.autoRenewPeriod = DEFAULT_AUTO_RENEW_PERIOD;\n        }\n        _;\n    }\n\n    function tinycentsToTinybars(uint256 tinycents) public returns (uint256 tinybars) {\n        (bool success, bytes memory result) = exchangeRatePrecompileAddress.call(\n            abi.encodeWithSelector(IExchangeRate.tinycentsToTinybars.selector, tinycents));\n        require(success, 'TinycentsToTinybars failed!');\n        tinybars = abi.decode(result, (uint256));\n    }\n\n    function tinybarsToTinycents(uint256 tinybars) internal returns (uint256 tinycents) {\n        (bool success, bytes memory result) = exchangeRatePrecompileAddress.call(\n            abi.encodeWithSelector(IExchangeRate.tinybarsToTinycents.selector, tinybars));\n        require(success, 'TinybarsToTinycents failed!');\n        tinycents = abi.decode(result, (uint256));\n    }\n\n    modifier costsTinycents(uint256 tinycents) {\n        uint256 requiredTinybars = tinycentsToTinybars(tinycents);\n        require(msg.value >= requiredTinybars, 'Did not send enough msg.value');\n        _;\n    }\n\n    function createFungibleToken(\n        IHederaTokenService.HederaToken memory token,\n        uint initialTotalSupply,\n        uint decimals) \n    internal nonEmptyExpiry(token) returns (int responseCode, address tokenAddress) {\n\n        (bool success, bytes memory result) = precompileAddress.call{value: msg.value}(\n            abi.encodeWithSelector(IHederaTokenService.createFungibleToken.selector,\n            token, initialTotalSupply, decimals));\n\n        (responseCode, tokenAddress) = success ? abi.decode(result, (int32, address)) : (HederaResponseCodes.UNKNOWN, address(0));\n    }\n\n    // /// Mints an amount of the token to the defined treasury account\n    // /// @param token The token for which to mint tokens. If token does not exist, transaction results in\n    // ///              INVALID_TOKEN_ID\n    // /// @param amount Applicable to tokens of type FUNGIBLE_COMMON. The amount to mint to the Treasury Account.\n    // ///               Amount must be a positive non-zero number represented in the lowest denomination of the\n    // ///               token. The new supply must be lower than 2^63.\n    // /// @param metadata Applicable to tokens of type NON_FUNGIBLE_UNIQUE. A list of metadata that are being created.\n    // ///                 Maximum allowed size of each metadata is 100 bytes\n    // /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    // /// @return newTotalSupply The new supply of tokens. For NFTs it is the total count of NFTs\n    // /// @return serialNumbers If the token is an NFT the newly generate serial numbers, otherwise empty.\n    function mintToken(address token, uint64 amount, bytes[] memory metadata) internal\n        returns (int responseCode, uint64 newTotalSupply, int64[] memory serialNumbers)\n    {\n        (bool success, bytes memory result) = precompileAddress.call(\n            abi.encodeWithSelector(IHederaTokenService.mintToken.selector,\n            token, amount, metadata));\n        (responseCode, newTotalSupply, serialNumbers) =\n            success\n                ? abi.decode(result, (int32, uint64, int64[]))\n                : (HederaResponseCodes.UNKNOWN, 0, new int64[](0));\n    }\n\n    /// Burns an amount of the token from the defined treasury account\n    /// @param token The token for which to burn tokens. If token does not exist, transaction results in\n    ///              INVALID_TOKEN_ID\n    /// @param amount  Applicable to tokens of type FUNGIBLE_COMMON. The amount to burn from the Treasury Account.\n    ///                Amount must be a positive non-zero number, not bigger than the token balance of the treasury\n    ///                account (0; balance], represented in the lowest denomination.\n    /// @param serialNumbers Applicable to tokens of type NON_FUNGIBLE_UNIQUE. The list of serial numbers to be burned.\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return newTotalSupply The new supply of tokens. For NFTs it is the total count of NFTs\n    function burnToken(address token, uint64 amount, int64[] memory serialNumbers) internal\n        returns (int responseCode, uint64 newTotalSupply)\n    {\n        (bool success, bytes memory result) = precompileAddress.call(\n            abi.encodeWithSelector(IHederaTokenService.burnToken.selector,\n            token, amount, serialNumbers));\n        (responseCode, newTotalSupply) =\n            success\n                ? abi.decode(result, (int32, uint64))\n                : (HederaResponseCodes.UNKNOWN, 0);\n    }\n\n    ///  Associates the provided account with the provided tokens. Must be signed by the provided\n    ///  Account's key or called from the accounts contract key\n    ///  If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.\n    ///  If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.\n    ///  If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.\n    ///  If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.\n    ///  If an association between the provided account and any of the tokens already exists, the\n    ///  transaction will resolve to TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT.\n    ///  If the provided account's associations count exceed the constraint of maximum token associations\n    ///    per account, the transaction will resolve to TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED.\n    ///  On success, associations between the provided account and tokens are made and the account is\n    ///    ready to interact with the tokens.\n    /// @param account The account to be associated with the provided tokens\n    /// @param tokens The tokens to be associated with the provided account. In the case of NON_FUNGIBLE_UNIQUE\n    ///               Type, once an account is associated, it can hold any number of NFTs (serial numbers) of that\n    ///               token type\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function associateTokens(address account, address[] memory tokens) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(\n            abi.encodeWithSelector(IHederaTokenService.associateTokens.selector,\n            account, tokens));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    function associateToken(address account, address token) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(\n            abi.encodeWithSelector(IHederaTokenService.associateToken.selector,\n            account, token));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    function dissociateToken(address account, address token) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(\n            abi.encodeWithSelector(IHederaTokenService.dissociateToken.selector,\n            account, token));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /**********************\n     * ABI v1 calls       *\n     **********************/\n\n    /// Transfers tokens where the calling account/contract is implicitly the first entry in the token transfer list,\n    /// where the amount is the value needed to zero balance the transfers. Regular signing rules apply for sending\n    /// (positive amount) or receiving (negative amount)\n    /// @param token The token to transfer to/from\n    /// @param sender The sender for the transaction\n    /// @param receiver The receiver of the transaction\n    /// @param amount Non-negative value to send. a negative value will result in a failure.\n    function transferToken(address token, address sender, address receiver, int64 amount) internal\n        returns (int responseCode)\n    {\n        (bool success, bytes memory result) = precompileAddress.call(\n            abi.encodeWithSelector(IHederaTokenService.transferToken.selector,\n            token, sender, receiver, amount));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    function approve(address token, address spender, int64 amount) internal returns (int responseCode)\n    {\n        (bool success, bytes memory result) = precompileAddress.call(\n            abi.encodeWithSelector(IHederaTokenService.approve.selector,\n            token, spender, amount));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n}"
        },
        {
            "name": "IExchangeRate.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/hedera/IExchangeRate.sol",
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.4.9 <0.9.0;\n\ninterface IExchangeRate {\n    // Given a value in tinycents (1e-8 US cents or 1e-10 USD), returns the \n    // equivalent value in tinybars (1e-8 HBAR) at the current exchange rate \n    // stored in system file 0.0.112. \n    // \n    // This rate is a weighted median of the the recent\" HBAR-USD exchange \n    // rate on major exchanges, but should _not_ be treated as a live price \n    // oracle! It is important primarily because the network will use it to \n    // compute the tinybar fees for the active transaction. \n    // \n    // So a \"self-funding\" contract can use this rate to compute how much \n    // tinybar its users must send to cover the Hedera fees for the transaction.\n    function tinycentsToTinybars(uint256 tinycents) external returns (uint256);\n\n    // Given a value in tinybars (1e-8 HBAR), returns the equivalent value in \n    // tinycents (1e-8 US cents or 1e-10 USD) at the current exchange rate \n    // stored in system file 0.0.112. \n    // \n    // This rate tracks the the HBAR-USD rate on public exchanges, but \n    // should _not_ be treated as a live price oracle! This conversion is\n    // less likely to be needed than the above conversion from tinycent to\n    // tinybars, but we include it for completeness.\n    function tinybarsToTinycents(uint256 tinybars) external returns (uint256);\n}"
        },
        {
            "name": "IHederaTokenService.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/hedera/IHederaTokenService.sol",
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.4.9 <0.9.0;\npragma experimental ABIEncoderV2;\n\ninterface IHederaTokenService {\n\n/// Expiry properties of a Hedera token - second, autoRenewAccount, autoRenewPeriod\n    struct Expiry {\n        // The epoch second at which the token should expire; if an auto-renew account and period are\n        // specified, this is coerced to the current epoch second plus the autoRenewPeriod\n        uint32 second;\n\n        // ID of an account which will be automatically charged to renew the token's expiration, at\n        // autoRenewPeriod interval, expressed as a solidity address\n        address autoRenewAccount;\n\n        // The interval at which the auto-renew account will be charged to extend the token's expiry\n        uint32 autoRenewPeriod;\n    }\n\n    /// A Key can be a public key from either the Ed25519 or ECDSA(secp256k1) signature schemes, where\n    /// in the ECDSA(secp256k1) case we require the 33-byte compressed form of the public key. We call\n    /// these public keys <b>primitive keys</b>.\n    /// A Key can also be the ID of a smart contract instance, which is then authorized to perform any\n    /// precompiled contract action that requires this key to sign.\n    /// Note that when a Key is a smart contract ID, it <i>doesn't</i> mean the contract with that ID\n    /// will actually create a cryptographic signature. It only means that when the contract calls a\n    /// precompiled contract, the resulting \"child transaction\" will be authorized to perform any action\n    /// controlled by the Key.\n    /// Exactly one of the possible values should be populated in order for the Key to be valid.\n    struct KeyValue {\n\n        // if set to true, the key of the calling Hedera account will be inherited as the token key\n        bool inheritAccountKey;\n\n        // smart contract instance that is authorized as if it had signed with a key\n        address contractId;\n\n        // Ed25519 public key bytes\n        bytes ed25519;\n\n        // Compressed ECDSA(secp256k1) public key bytes\n        bytes ECDSA_secp256k1;\n\n        // A smart contract that, if the recipient of the active message frame, should be treated\n        // as having signed. (Note this does not mean the <i>code being executed in the frame</i>\n        // will belong to the given contract, since it could be running another contract's code via\n        // <tt>delegatecall</tt>. So setting this key is a more permissive version of setting the\n        // contractID key, which also requires the code in the active message frame belong to the\n        // the contract with the given id.)\n        address delegatableContractId;\n    }\n\n    /// A list of token key types the key should be applied to and the value of the key\n    struct TokenKey {\n\n        // bit field representing the key type. Keys of all types that have corresponding bits set to 1\n        // will be created for the token.\n        // 0th bit: adminKey\n        // 1st bit: kycKey\n        // 2nd bit: freezeKey\n        // 3rd bit: wipeKey\n        // 4th bit: supplyKey\n        // 5th bit: feeScheduleKey\n        // 6th bit: pauseKey\n        // 7th bit: ignored\n        uint keyType;\n\n        // the value that will be set to the key type\n        KeyValue key;\n    }\n\n    /// Basic properties of a Hedera Token - name, symbol, memo, tokenSupplyType, maxSupply,\n    /// treasury, freezeDefault. These properties are related both to Fungible and NFT token types.\n    struct HederaToken {\n        // The publicly visible name of the token. The token name is specified as a Unicode string.\n        // Its UTF-8 encoding cannot exceed 100 bytes, and cannot contain the 0 byte (NUL).\n        string name;\n\n        // The publicly visible token symbol. The token symbol is specified as a Unicode string.\n        // Its UTF-8 encoding cannot exceed 100 bytes, and cannot contain the 0 byte (NUL).\n        string symbol;\n\n        // The ID of the account which will act as a treasury for the token as a solidity address.\n        // This account will receive the specified initial supply or the newly minted NFTs in\n        // the case for NON_FUNGIBLE_UNIQUE Type\n        address treasury;\n\n        // The memo associated with the token (UTF-8 encoding max 100 bytes)\n        string memo;\n\n        // IWA compatibility. Specified the token supply type. Defaults to INFINITE\n        bool tokenSupplyType;\n\n        // IWA Compatibility. Depends on TokenSupplyType. For tokens of type FUNGIBLE_COMMON - the\n        // maximum number of tokens that can be in circulation. For tokens of type NON_FUNGIBLE_UNIQUE -\n        // the maximum number of NFTs (serial numbers) that can be minted. This field can never be changed!\n        uint32 maxSupply;\n\n        // The default Freeze status (frozen or unfrozen) of Hedera accounts relative to this token. If\n        // true, an account must be unfrozen before it can receive the token\n        bool freezeDefault;\n\n        // list of keys to set to the token\n        TokenKey[] tokenKeys;\n\n        // expiry properties of a Hedera token - second, autoRenewAccount, autoRenewPeriod\n        Expiry expiry;\n    }\n\n    /// Transfers cryptocurrency among two or more accounts by making the desired adjustments to their\n    /// balances. Each transfer list can specify up to 10 adjustments. Each negative amount is withdrawn\n    /// from the corresponding account (a sender), and each positive one is added to the corresponding\n    /// account (a receiver). The amounts list must sum to zero. Each amount is a number of tinybars\n    /// (there are 100,000,000 tinybars in one hbar).  If any sender account fails to have sufficient\n    /// hbars, then the entire transaction fails, and none of those transfers occur, though the\n    /// transaction fee is still charged. This transaction must be signed by the keys for all the sending\n    /// accounts, and for any receiving accounts that have receiverSigRequired == true. The signatures\n    /// are in the same order as the accounts, skipping those accounts that don't need a signature.\n    struct AccountAmount {\n        // The Account ID, as a solidity address, that sends/receives cryptocurrency or tokens\n        address accountID;\n\n        // The amount of  the lowest denomination of the given token that\n        // the account sends(negative) or receives(positive)\n        int64 amount;\n    }\n\n    /**********************\n     * Direct HTS Calls   *\n     **********************/\n\n    /// Creates a Fungible Token with the specified properties\n    /// @param token the basic properties of the token being created\n    /// @param initialTotalSupply Specifies the initial supply of tokens to be put in circulation. The\n    /// initial supply is sent to the Treasury Account. The supply is in the lowest denomination possible.\n    /// @param decimals the number of decimal places a token is divisible by\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenAddress the created token's address\n    function createFungibleToken(\n        HederaToken memory token,\n        uint initialTotalSupply,\n        uint decimals)\n    external payable returns (int responseCode, address tokenAddress);\n\n    /// Mints an amount of the token to the defined treasury account\n    /// @param token The token for which to mint tokens. If token does not exist, transaction results in\n    ///              INVALID_TOKEN_ID\n    /// @param amount Applicable to tokens of type FUNGIBLE_COMMON. The amount to mint to the Treasury Account.\n    ///               Amount must be a positive non-zero number represented in the lowest denomination of the\n    ///               token. The new supply must be lower than 2^63.\n    /// @param metadata Applicable to tokens of type NON_FUNGIBLE_UNIQUE. A list of metadata that are being created.\n    ///                 Maximum allowed size of each metadata is 100 bytes\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return newTotalSupply The new supply of tokens. For NFTs it is the total count of NFTs\n    /// @return serialNumbers If the token is an NFT the newly generate serial numbers, othersise empty.\n    function mintToken(address token, uint64 amount, bytes[] calldata metadata) external\n        returns (int responseCode, uint64 newTotalSupply, int[] memory serialNumbers);\n\n    /// Burns an amount of the token from the defined treasury account\n    /// @param token The token for which to burn tokens. If token does not exist, transaction results in\n    ///              INVALID_TOKEN_ID\n    /// @param amount  Applicable to tokens of type FUNGIBLE_COMMON. The amount to burn from the Treasury Account.\n    ///                Amount must be a positive non-zero number, not bigger than the token balance of the treasury\n    ///                account (0; balance], represented in the lowest denomination.\n    /// @param serialNumbers Applicable to tokens of type NON_FUNGIBLE_UNIQUE. The list of serial numbers to be burned.\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return newTotalSupply The new supply of tokens. For NFTs it is the total count of NFTs\n    function burnToken(address token, uint64 amount, int64[] calldata serialNumbers) external\n        returns (int responseCode, uint64 newTotalSupply);\n\n    ///  Associates the provided account with the provided tokens. Must be signed by the provided\n    ///  Account's key or called from the accounts contract key\n    ///  If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.\n    ///  If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.\n    ///  If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.\n    ///  If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.\n    ///  If an association between the provided account and any of the tokens already exists, the\n    ///  transaction will resolve to TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT.\n    ///  If the provided account's associations count exceed the constraint of maximum token associations\n    ///    per account, the transaction will resolve to TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED.\n    ///  On success, associations between the provided account and tokens are made and the account is\n    ///    ready to interact with the tokens.\n    /// @param account The account to be associated with the provided tokens\n    /// @param tokens The tokens to be associated with the provided account. In the case of NON_FUNGIBLE_UNIQUE\n    ///               Type, once an account is associated, it can hold any number of NFTs (serial numbers) of that\n    ///               token type\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function associateTokens(address account, address[] calldata tokens) external returns (int responseCode);\n\n    /// Single-token variant of associateTokens. Will be mapped to a single entry array call of associateTokens\n    /// @param account The account to be associated with the provided token\n    /// @param token The token to be associated with the provided account\n    function associateToken(address account, address token) external returns (int responseCode);\n\n    /// Single-token variant of dissociateTokens. Will be mapped to a single entry array call of dissociateTokens\n    /// @param account The account to be associated with the provided token\n    /// @param token The token to be associated with the provided account\n    function dissociateToken(address account, address token)\n        external\n        returns (int64 responseCode);\n\n    /**********************\n     * ABIV1 calls        *\n     **********************/\n\n\n\n    /// Transfers tokens where the calling account/contract is implicitly the first entry in the token transfer list,\n    /// where the amount is the value needed to zero balance the transfers. Regular signing rules apply for sending\n    /// (positive amount) or receiving (negative amount)\n    /// @param token The token to transfer to/from\n    /// @param sender The sender for the transaction\n    /// @param recipient The receiver of the transaction\n    /// @param amount Non-negative value to send. a negative value will result in a failure.\n    function transferToken(address token, address sender, address recipient, int64 amount) external returns (int responseCode);\n\n    /// Allows spender to withdraw from your account multiple times, up to the value amount. If this function is called\n    /// again it overwrites the current allowance with value.\n    /// Only Applicable to Fungible Tokens\n    /// @param token The hedera token address to approve\n    /// @param spender the account address authorized to spend\n    /// @param amount the amount of tokens authorized to spend.\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function approve(\n        address token,\n        address spender,\n        uint256 amount\n    ) external returns (int64 responseCode);\n}"
        },
        {
            "name": "SafeHederaTokenService.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/hedera/SafeHederaTokenService.sol",
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity =0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./HederaTokenService.sol\";\nimport '../libraries/SafeCast.sol';\nimport \"./IHederaTokenService.sol\";\n\ncontract SafeHederaTokenService is HederaTokenService {\n\n    using SafeCast for uint256;\n\n    event Transfer(address indexed from, address indexed to, uint64 value);\n    event Approve(address indexed spender, uint64 value);\n\n    function safeMintToken(address token, address to, uint256 amount, bytes[] memory metadata) internal\n    returns (uint64 newTotalSupply, int64[] memory serialNumbers) {\n        int responseCode;\n        (responseCode, newTotalSupply, serialNumbers) = HederaTokenService.mintToken(token, amount.toUint64(), metadata);\n        require(responseCode == HederaResponseCodes.SUCCESS, \"Safe mint failed!\");\n        emit Transfer(address(0), to, amount.toUint64());\n    }\n\n    function safeBurnToken(address token, address to, uint256 amount, int64[] memory serialNumbers) internal\n    returns (uint64 newTotalSupply)\n    {\n        int responseCode;\n        (responseCode, newTotalSupply) = HederaTokenService.burnToken(token, amount.toUint64(), serialNumbers);\n        require(responseCode == HederaResponseCodes.SUCCESS, \"Safe burn failed!\");\n        emit Transfer(to, address(0), amount.toUint64());\n    }\n\n    function safeAssociateTokens(address account, address[] memory tokens) internal {\n        int responseCode;\n        responseCode = HederaTokenService.associateTokens(account, tokens);\n        require(responseCode == HederaResponseCodes.SUCCESS, \"Safe multiple associations failed!\");\n    }\n\n    function safeAssociateToken(address account, address token) internal {\n        int responseCode;\n        responseCode = HederaTokenService.associateToken(account, token);\n        require(responseCode == HederaResponseCodes.SUCCESS, \"Safe single association failed!\");\n    }\n\n    function safeTransferToken(address token, address sender, address receiver, uint256 amount) internal {\n        int responseCode;\n        responseCode = HederaTokenService.transferToken(token, sender, receiver, amount.toInt64());\n        require(responseCode == HederaResponseCodes.SUCCESS, \"Safe token transfer failed!\");\n        emit Transfer(sender, receiver, uint64(amount));\n    }\n\n    function safeApproveToken(address token, address spender, uint256 amount) internal {\n        int responseCode;\n        responseCode = HederaTokenService.approve(token, spender, amount.toInt64());\n        require(responseCode == HederaResponseCodes.SUCCESS, \"Safe approve failed!\");\n        emit Approve(spender, uint64(amount));\n    }\n\n    function safeDissociateToken(address account, address token) internal {\n        int responseCode;\n        responseCode = HederaTokenService.dissociateToken(account, token);\n        require(responseCode == HederaResponseCodes.SUCCESS, \"Safe single association failed!\");\n    }\n}\n"
        },
        {
            "name": "IERC20.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/interfaces/IERC20.sol",
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n}\n"
        },
        {
            "name": "IUniswapV2Factory.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/interfaces/IUniswapV2Factory.sol",
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function rentPayer() external view returns (address);\n    function pairCreateFee() external view returns (uint256);\n    function tokenCreateFee() external view returns (uint256);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external payable returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function setRentPayer(address) external;\n    function setPairCreateFee(uint256) external;\n    function setTokenCreateFee(uint256) external;\n}\n"
        },
        {
            "name": "IUniswapV2Pair.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/interfaces/IUniswapV2Pair.sol",
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function lpToken() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n    function createFungible() external payable returns (address);\n}\n"
        },
        {
            "name": "IUniswapV2Router01.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/interfaces/IUniswapV2Router01.sol",
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WHBAR() external pure returns (address);\n    function whbar() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function addLiquidityNewPool(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountA, uint amountB, uint liquidity);\n    \n    function addLiquidityETHNewPool(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
        },
        {
            "name": "IUniswapV2Router02.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/interfaces/IUniswapV2Router02.sol",
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.2;\npragma experimental ABIEncoderV2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    \n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    \n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
        },
        {
            "name": "IWHBAR.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/interfaces/IWHBAR.sol",
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.5.0;\n\ninterface IWHBAR {\n    function token() external returns (address);\n    function deposit() external payable;\n    function deposit(address src, address dst) external payable;\n    function withdraw(address src, address dst, uint wad) external;\n    function withdraw(uint wad) external;\n\n    event  Deposit(address indexed dst, uint wad);\n    event  Withdrawal(address indexed src, uint wad);   \n}\n"
        },
        {
            "name": "SafeCast.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/libraries/SafeCast.sol",
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\nlibrary SafeCast {\n        \n    function toInt64(uint256 value) internal pure returns (int64) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int64).max), \"SafeCast: value doesn't fit in an int64\");\n        return int64(value);\n    }\n\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n}"
        },
        {
            "name": "SafeMath.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/libraries/SafeMath.sol",
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"
        },
        {
            "name": "TransferHelper.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/libraries/TransferHelper.sol",
            "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0;\n\nlibrary TransferHelper {\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}"
        },
        {
            "name": "UniswapV2Library.sol",
            "path": "/data/contracts/partial_match/295/0x00000000000000000000000000000000002E7A5D/sources/project_/contracts/libraries/UniswapV2Library.sol",
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.5.0;\n\nimport '../interfaces/IUniswapV2Pair.sol';\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'407b3b02625070246aa1a1a346747a190d54149fc468122d6934af99b6ad0e6a'\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
        }
    ]
}


const BYTES4_RESPONSE = {
    "count": 3,
    "next": null,
    "previous": null,
    "results": [
        {
            "id": 1065295,
            "created_at": "2023-06-17T03:45:54.407074Z",
            "text_signature": "_SIMONdotBLACK_(int8,int224,int104,uint88[],bytes29[])",
            "hex_signature": "0xf305d719",
            "bytes_signature": "ó\u0005×\u0019"
        },
        {
            "id": 844482,
            "created_at": "2022-09-02T10:24:01.310054Z",
            "text_signature": "watch_tg_invmru_8554910(address,address,bool)",
            "hex_signature": "0xf305d719",
            "bytes_signature": "ó\u0005×\u0019"
        },
        {
            "id": 171032,
            "created_at": "2020-05-19T07:39:57.530767Z",
            "text_signature": "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
            "hex_signature": "0xf305d719",
            "bytes_signature": "ó\u0005×\u0019"
        }
    ]
}